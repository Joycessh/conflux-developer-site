(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{190:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return o})),a.d(t,"default",(function(){return d}));var n=a(1),b=a(9),r=(a(0),a(202)),c={},o={id:"conflux-doc/docs/javascript-api",title:"javascript-api",description:"----------",source:"@site/docs/conflux-doc/docs/javascript-api.md",permalink:"/docs/conflux-doc/docs/javascript-api",editUrl:"https://github.com/Conflux-Chain/conflux-developer-site/edit/master/docs/conflux-doc/docs/javascript-api.md",lastUpdatedBy:"yqrashawn",lastUpdatedAt:1586699466},l={};function d(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("hr",null),Object(r.b)("h1",{id:"user-content-getting-started-with-confluxweb"},"Getting Started with ConfluxWeb"),Object(r.b)("p",null,"The conflux-web library is a collection of modules which contain specific functionality for the conflux ecosystem."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The ","conflux-web-cfx"," is for the conflux blockchain and smart contracts.")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The ","conflux-web-utils"," contains useful helper functions for Dapp developers.")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Adding conflux-web")),Object(r.b)("p",null,"First you need to get conflux-web into your project. This can be done using the following methods:"),Object(r.b)("p",null,"npm: ","npm install conflux-web"),Object(r.b)("p",null,"After that you need to create a confluxWeb instance and set a provider. Normally you should connect to a remote/local node."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"const ConfluxWeb = require('conflux-web');\nconst confluxWeb = new ConfluxWeb('http://testnet-jsonrpc.conflux-chain.org:12537');\n")),Object(r.b)("p",null,"That\u2019s it! now you can use the confluxWeb object."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Using Promises")),Object(r.b)("p",null,"All of functions use asynchronous HTTP requests and return promises by default:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"const ConfluxWeb = require('conflux-web');\nconst confluxWeb = new ConfluxWeb('http://testnet-jsonrpc.conflux-chain.org:12537');\nconfluxWeb.cfx.getEpochNumber().then(console.log);\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A note on big numbers")),Object(r.b)("p",null,"You will always get a BigNumber object for number values as JavaScript is not able to handle big numbers correctly. Look at the following examples:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'"101010100324325345346456456456456456456"\n// "101010100324325345346456456456456456456"\n101010100324325345346456456456456456456\n// 1.0101010032432535e+38\n')),Object(r.b)("p",null,"ConfluxWeb depends on the BN.js library for big numbers, See the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/indutny/bn.js/"}),"BN.js")," documentation for details."),Object(r.b)("h1",{id:"user-content-confluxweb-by-example"},"ConfluxWeb by Example"),Object(r.b)("h2",{id:"user-content-hash-time-locked-contract"},"Hash Time Locked Contract"),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/conflux-doc/docs/javascript-example"}),"Here")," we brought you a ConfluxWeb example.\nYou can learn how to develop a Hash Time Locked Contract (HTLC) with ConfluxWeb API."),Object(r.b)("h1",{id:"user-content-confluxweb-api-reference"},"ConfluxWeb API Reference"),Object(r.b)("h2",{id:"user-content-confluxweb"},"ConfluxWeb"),Object(r.b)("h3",{id:"user-content-confluxwebproviders"},"ConfluxWeb.providers"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Class attribute")),Object(r.b)("p",null,"object"),Object(r.b)("h4",{id:"user-content-example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > ConfluxWeb.providers\n { HttpProvider: [Function: HttpProvider$1],\n  WebsocketProvider: [Function: WebsocketProvider$1],\n  IpcProvider: [Function: IpcProvider$1] }\n")),Object(r.b)("h3",{id:"user-content-confluxwebmodules"},"ConfluxWeb.modules"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Class attribute")),Object(r.b)("p",null,"object"),Object(r.b)("h4",{id:"user-content-example-1"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > ConfluxWeb.modules\n { Cfx: [Function: Cfx], Net: [Function: Net] }\n")),Object(r.b)("h3",{id:"user-content-confluxwebutils"},"ConfluxWeb.utils"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Class attribute\nObject attribute")),Object(r.b)("p",null,"Property of ConfluxWeb class and instance of ConfluxWeb, See confluxWeb.utils for more."),Object(r.b)("p",null,"object"),Object(r.b)("h4",{id:"user-content-example-2"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > ConfluxWeb.utils\n {...}\n\n > confluxWeb.utils\n {...}\n")),Object(r.b)("h3",{id:"user-content-confluxwebversion"},"ConfluxWeb.version"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Object attribute")),Object(r.b)("p",null,"current version"),Object(r.b)("p",null,"string"),Object(r.b)("h4",{id:"user-content-example-3"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.version\n 0.1.21-alpha.0\n")),Object(r.b)("h3",{id:"user-content-confluxwebcurrentprovider"},"ConfluxWeb.currentProvider"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Object attribute")),Object(r.b)("p",null,"current provider instance"),Object(r.b)("p",null,"object"),Object(r.b)("h4",{id:"user-content-example-4"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.currentProvider;\n HttpProvider {\n host: 'http://testnet-jsonrpc.conflux-chain.org:12537',\n ...\n }\n")),Object(r.b)("h3",{id:"user-content-confluxwebsetprovider"},"ConfluxWeb.setProvider"),Object(r.b)("p",null,"Will change the provider for its module."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: When called on the umbrella package cfx it will also set the provider for all sub modules confluxWeb.cfx, etc.")),Object(r.b)("p",null,"function setProvider(provider)"),Object(r.b)("h4",{id:"user-content-parameters"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"provider"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A valid provider.")))),Object(r.b)("h4",{id:"user-content-return"},"Return"),Object(r.b)("p",null,"boolean"," "),Object(r.b)("h4",{id:"user-content-example-5"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > const ConfluxWeb = require('conflux-web');\n > const confluxWeb = new ConfluxWeb('http://testnet-jsonrpc.conflux-chain.org:12537');\n > confluxWeb.currentProvider\n HttpProvider {\n  host: 'http://testnet-jsonrpc.conflux-chain.org:12537',\n  ...\n }\n > confluxWeb.setProvider(new ConfluxWeb.providers.HttpProvider('http://localhost:12537'));\n true\n > confluxWeb.currentProvider\n HttpProvider {\n   host: 'http://localhost:12537'\n   ...\n }\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.setProvider('http://localhost:12537'); // same as above\n true\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.cfx.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.setProvider(\'http://localhost:12537\') // change all provider\n > confluxWeb.currentProvider.host\n "http://localhost:12537"\n > confluxWeb.cfx.currentProvider.host\n "http://localhost:12537"\n')),Object(r.b)("hr",null),Object(r.b)("h2",{id:"user-content-confluxwebcfxcontract"},"ConfluxWeb.cfx.Contract"),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractabimodel"},"ConfluxWeb.cfx.Contract.abiModel"),Object(r.b)("p",null,"abi object"),Object(r.b)("p",null,"Object"),Object(r.b)("h4",{id:"user-content-example-6"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > contract.abiModel\n AbiModel {\n  abi:\n   { methods:\n      { count: [AbiItemModel],\n        '0x06661abd': [AbiItemModel],\n        'count()': [AbiItemModel],\n        inc: [AbiItemModel],\n        '0x812600df': [AbiItemModel],\n        'inc(uint256)': [AbiItemModel],\n        contractConstructor: [AbiItemModel] },\n     events: {} } }\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractaddress"},"ConfluxWeb.cfx.Contract.address"),Object(r.b)("p",null,'The address used for this contract instance.\nAll transactions generated by confluxWeb from this contract will contain this address as the "to".'),Object(r.b)("p",null,"string"),Object(r.b)("h4",{id:"user-content-example-7"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > contract.address; // What you set when new contract.\n "0xf02dbcf0eff48e174ca59f1975a7b0042c4d02b7"\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractdefaultgas"},"ConfluxWeb.cfx.Contract.defaultGas"),Object(r.b)("p",null,"The default maximum gas provided for a transaction (gasLimit)."),Object(r.b)("p",null,"number"),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractdefaultgasprice"},"ConfluxWeb.cfx.Contract.defaultGasPrice"),Object(r.b)("p",null,"The default gas price in drip to use for transactions."),Object(r.b)("p",null,"number"),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractmethods"},"ConfluxWeb.cfx.Contract.methods"),Object(r.b)("p",null,"Creates a transaction object for that method, which then can be called, send, estimated.\nThe methods of this smart contract are available through:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The name: myContract.methods.myMethod(123)"),Object(r.b)("li",{parentName:"ul"},"The name with parameters: myContract.methods",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"123"}),"'myMethod(uint256)'")),Object(r.b)("li",{parentName:"ul"},"The signature: myContract.methods",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"123"}),"'0x58cf5f10'"),"\nThis allows calling functions with same name but different parameters from the JavaScript contract object.")),Object(r.b)("p",null,"Proxy"),Object(r.b)("h4",{id:"user-content-example-8"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > contract.address;\n \"0x079352147ce2de227af6fa963f603a35aed8e601\"\n\n > await contract.methods.count().call();\n BigNumber { _hex: '0xfe' }\n\n > await contract.methods.inc(1).call(); // call will get function return value\n BigNumber { _hex: '0xff' }\n\n > await contract.methods.count().call(); // can not change data in block chain by `call`\n BigNumber { _hex: '0xfe' }\n\n > await contract.methods.inc(1).send({\n    from: '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b',\n    gas: 100000000,\n    gasPrice: 100\n  }); // send a transaction\n \"0xa3b0ca9cfbbdc624db53fc5df39849560ffa2d952b7e9af894524d45479cfa0a\"\n > await confluxWeb.cfx.getTransactionReceipt('0xa3b0ca9cfbbdc624db53fc5df39849560ffa2d952b7e9af894524d45479cfa0a');\n {\n   status: true,\n   ...\n }\n > await contract.methods.count().call(); // change data in block chain by `send`\n BigNumber { _hex: '0xff' }\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractconstructor"},"ConfluxWeb.cfx.Contract.constructor"),Object(r.b)("p",null,"Creates a new contract instance with all its methods and events defined in its json interface abi object."),Object(r.b)("p",null,"function constructor(abi,address,options)"),Object(r.b)("h4",{id:"user-content-parameters-1"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"abi"),Object(r.b)("td",{parentName:"tr"},"object","|","array"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The abi json interface of the contract.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"address"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The address where the contract is deployed. If undefined, you should deploy contract by data.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.data"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The byte code of the contract. Used when the contract gets deployed.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.from"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The address transactions should be made from.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.gasPrice"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The gas price in drip to use for transactions.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.gas"),Object(r.b)("td",{parentName:"tr"},"number"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The maximum gas provided for a transaction (gasLimit).")))),Object(r.b)("h4",{id:"user-content-return-1"},"Return"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-example-9"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.cfx.accounts.wallet.add(\'0xa816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393\'); // KEY\n > const contract = new confluxWeb.cfx.Contract(\n [\n {\n        "constant": true,\n        "inputs": [],\n        "name": "count",\n        "outputs": [\n          {\n            "internalType": "uint256",\n            "name": "",\n            "type": "uint256"\n          }\n        ],\n        "payable": false,\n        "stateMutability": "view",\n        "type": "function"\n      },\n {\n        "constant": false,\n        "inputs": [\n          {\n            "internalType": "uint256",\n            "name": "num",\n            "type": "uint256"\n          }\n        ],\n        "name": "inc",\n        "outputs": [\n          {\n            "internalType": "uint256",\n            "name": "",\n            "type": "uint256"\n          }\n        ],\n        "payable": false,\n        "stateMutability": "nonpayable",\n        "type": "function"\n       },\n {\n        "inputs": [\n          {\n            "internalType": "uint256",\n            "name": "num",\n            "type": "uint256"\n          }\n        ],\n        "payable": false,\n        "stateMutability": "nonpayable",\n        "type": "constructor"\n      }\n ],\n );\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractdeploy"},"ConfluxWeb.cfx.Contract.deploy"),Object(r.b)("p",null,"function deploy(options)"),Object(r.b)("h4",{id:"user-content-parameters-2"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.data"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"contract data")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.arguments"),Object(r.b)("td",{parentName:"tr"},"array"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"contract constructor parameters")))),Object(r.b)("h4",{id:"user-content-return-2"},"Return"),Object(r.b)("p",null,"Object"," "),Object(r.b)("h4",{id:"user-content-example-10"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > await contract.deploy({arguments: [254]}).send({\n    from: '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b',\n    gas: 100000000,\n    gasPrice: 819\n }); // deploy contract by `send`\n \"0x6d1b5d68540faac893e5d5dcfed7fc253a2fd6936634f917c82856a0b19c3838\"\n\n > await confluxWeb.cfx.getTransactionReceipt('0xd1d5b66b0d3d215f042f3e4907a3bf0acf5984972527fbca45eb67286835260d');\n {\n   status: true,\n   contractCreated: '0x079352147ce2de227af6fa963f603a35aed8e601',\n   ...\n }\n\n > contract.address = '0x079352147ce2de227af6fa963f603a35aed8e601'; // after deploy, you should add address to contract\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractclone"},"ConfluxWeb.cfx.Contract.clone"),Object(r.b)("p",null,"Clones the current contract instance."),Object(r.b)("p",null,"function clone()"),Object(r.b)("h4",{id:"user-content-parameters-3"},"Parameters"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-return-3"},"Return"),Object(r.b)("p",null,"Object"," The new contract instance."),Object(r.b)("h4",{id:"user-content-example-11"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > const clone = contract.clone()\n > contract.defaultGas === clone.defaultGas;\n true\n\n > contract.defaultGasPrice === clone.defaultGasPrice;\n true\n\n > contract.address === clone.address; // only address difference, and clone one address to be undefined\n false\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"user-content-confluxwebcfx"},"ConfluxWeb.cfx"),Object(r.b)("h3",{id:"user-content-confluxwebcfxdefaultaccount"},"ConfluxWeb.cfx.defaultAccount"),Object(r.b)("p",null,'This default address is used as the default "from" property.'),Object(r.b)("p",null,"20 Bytes: Any Conflux address. You should have the private key for that address in your node or keystore."),Object(r.b)("p",null,"string|undefined"),Object(r.b)("h4",{id:"user-content-example-12"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.defaultAccount\n undefined\n\n > confluxWeb.cfx.defaultAccount = '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b';\n > confluxWeb.cfx.defaultAccount\n \"0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxdefaultepoch"},"ConfluxWeb.cfx.defaultEpoch"),Object(r.b)("p",null,"When requests are made that act on the state of conflux,\nthe default epoch parameter determines the height of the epoch."),Object(r.b)("p",null,"The following options are possible for the default epoch parameter:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"number",": An integer epoch number."),Object(r.b)("li",{parentName:"ul"},'"earliest"',": The earliest epoch where the genesis block in."),Object(r.b)("li",{parentName:"ul"},'"latest_state"',": The latest epoch where the latest block with an executed state in. (default)"),Object(r.b)("li",{parentName:"ul"},'"latest_mined"',": The latest epoch where the latest mined block in.")),Object(r.b)("p",null,"number|string"),Object(r.b)("h4",{id:"user-content-example-13"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.cfx.defaultEpoch; // Default is "latest_state"\n "latest_state"\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxcurrentprovider"},"ConfluxWeb.cfx.currentProvider"),Object(r.b)("p",null,"Will return the current provider, otherwise null"),Object(r.b)("p",null,"object|null"),Object(r.b)("h4",{id:"user-content-example-14"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.currentProvider\n HttpProvider {\n  host: 'http://testnet-jsonrpc.conflux-chain.org:12537',\n  ...\n }\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxsetprovider"},"ConfluxWeb.cfx.setProvider"),Object(r.b)("p",null,"Will change the provider for its module."),Object(r.b)("p",null,"function setProvider(cfxProvider)"),Object(r.b)("h4",{id:"user-content-parameters-4"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"cfxProvider"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A valid provider.")))),Object(r.b)("h4",{id:"user-content-return-4"},"Return"),Object(r.b)("p",null,"boolean"," "),Object(r.b)("h4",{id:"user-content-example-15"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.cfx.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.cfx.setProvider(\'http://localhost:12537\') // change module provider\n > confluxWeb.currentProvider.host\n "http://testnet-jsonrpc.conflux-chain.org:12537"\n > confluxWeb.cfx.currentProvider.host\n "http://localhost:12537"\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxgetgasprice"},"ConfluxWeb.cfx.getGasPrice"),Object(r.b)("p",null,"Returns the current gas price oracle.\nThe gas price is determined by the last few blocks median gas price."),Object(r.b)("p",null,"async function getGasPrice()"),Object(r.b)("h4",{id:"user-content-parameters-5"},"Parameters"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-return-5"},"Return"),Object(r.b)("p",null,"Promise.<string>"," Number string of the current gas price in drip."),Object(r.b)("h4",{id:"user-content-example-16"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.getGasPrice()\n "0"\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxgetepochnumber"},"ConfluxWeb.cfx.getEpochNumber"),Object(r.b)("p",null,"Returns the current epoch number the client is on."),Object(r.b)("p",null,"async function getEpochNumber()"),Object(r.b)("h4",{id:"user-content-parameters-6"},"Parameters"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-return-6"},"Return"),Object(r.b)("p",null,"Promise.<number>"," "),Object(r.b)("h3",{id:"user-content-example-17"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > await confluxWeb.cfx.getEpochNumber();\n 990902\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxgetbalance"},"ConfluxWeb.cfx.getBalance"),Object(r.b)("p",null,"Get the balance of an address at a given epoch."),Object(r.b)("p",null,"async function getBalance(address,defaultEpoch)"),Object(r.b)("h4",{id:"user-content-parameters-7"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"address"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The address to get the balance of.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"defaultEpoch"),Object(r.b)("td",{parentName:"tr"},"number","|","string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"confluxWeb.cfx.defaultEpoch"),Object(r.b)("td",{parentName:"tr"},"If you pass this parameter it will not use the default epoch.")))),Object(r.b)("h4",{id:"user-content-return-7"},"Return"),Object(r.b)("p",null,"Promise.<string>"," The current balance for the given address in drip."),Object(r.b)("h4",{id:"user-content-example-18"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1");\n "685539999999937000"\n\n > await confluxWeb.cfx.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1", "earliest");\n "0"\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxgetcode"},"ConfluxWeb.cfx.getCode"),Object(r.b)("p",null,"Get the code at a specific address."),Object(r.b)("p",null,"async function getCode(address,defaultEpoch)"),Object(r.b)("h4",{id:"user-content-parameters-8"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"address"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The address to get the code from.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"defaultEpoch"),Object(r.b)("td",{parentName:"tr"},"number","|","string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"confluxWeb.cfx.defaultEpoch"),Object(r.b)("td",{parentName:"tr"},"If you pass this parameter it will not use the default epoch.")))),Object(r.b)("h4",{id:"user-content-return-8"},"Return"),Object(r.b)("p",null,"Promise.<string>"," The data at given address"),Object(r.b)("h4",{id:"user-content-example-19"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.getCode("0x079352147ce2de227af6fa963f603a35aed8e601");\n "0x6080604052348015600f57600080fd5b506004361060325760003560e01c806306661abd146037578063812600df146053575b600080fd5b603d6092565b6040518082815260200191505060405180910390f35b607c60048036036020811015606757600080fd5b81019080803590602001909291905050506098565b6040518082815260200191505060405180910390f35b60005481565b60008160008082825401925050819055905091905056fea265627a7a723158203aa4346abf52089d9be8806b8bf35dff408bd9f68f668e528bc8e2e20d74b29064736f6c634300050b0032"\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxgetblock"},"ConfluxWeb.cfx.getBlock"),Object(r.b)("p",null,"Returns a block matching the block number or block hash."),Object(r.b)("p",null,"async function getBlock(blockHashOrEpochNumber,returnTransactionObjects)"),Object(r.b)("h4",{id:"user-content-parameters-9"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"blockHashOrEpochNumber"),Object(r.b)("td",{parentName:"tr"},"string","|","number"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The block hash or epoch.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"returnTransactionObjects"),Object(r.b)("td",{parentName:"tr"},"boolean"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"If true, the returned block will contain all transactions as objects, if false it will only contains the transaction hashes.")))),Object(r.b)("h4",{id:"user-content-return-9"},"Return"),Object(r.b)("p",null,"Promise.<object>"," The block object"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"string"," miner: The address of the beneficiary to whom the mining rewards were given."),Object(r.b)("li",{parentName:"ul"},"string|null"," hash: Hash of the block. ","null"," when its pending block."),Object(r.b)("li",{parentName:"ul"},"string"," parentHash: Hash of the parent block."),Object(r.b)("li",{parentName:"ul"},"string[]"," refereeHashes: Array of referee hashes."),Object(r.b)("li",{parentName:"ul"},"number|null"," epochNumber: The current block epoch number in the client's view. ","null"," when it's not in best block's past set."),Object(r.b)("li",{parentName:"ul"},"boolean"," stable: If the block stable or not"),Object(r.b)("li",{parentName:"ul"},"string"," nonce: Hash of the generated proof-of-work. ","null"," when its pending block."),Object(r.b)("li",{parentName:"ul"},"number"," gasLimit: The maximum gas allowed in this block."),Object(r.b)("li",{parentName:"ul"},"string"," difficulty: Integer string of the difficulty for this block."),Object(r.b)("li",{parentName:"ul"},"number"," height: The block heights. ","null"," when its pending block."),Object(r.b)("li",{parentName:"ul"},"number"," size: Integer the size of this block in bytes."),Object(r.b)("li",{parentName:"ul"},"number"," blame: 0 if there's nothing to blame; k if the block is blaming on the state info of its k-th ancestor."),Object(r.b)("li",{parentName:"ul"},"boolean"," adaptive: If the block's weight adaptive or not."),Object(r.b)("li",{parentName:"ul"},"number"," timestamp: The unix timestamp for when the block was collated."),Object(r.b)("li",{parentName:"ul"},"string"," transactionsRoot: The hash of the transactions of the block."),Object(r.b)("li",{parentName:"ul"},"string[]"," transactions: Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter."),Object(r.b)("li",{parentName:"ul"},"string"," deferredLogsBloomHash: The hash of the deferred block's log bloom filter"),Object(r.b)("li",{parentName:"ul"},"string"," deferredReceiptsRoot: The hash of the receipts of the block after deferred execution."),Object(r.b)("li",{parentName:"ul"},"string"," deferredStateRoot: The root of the final state trie of the block after deferred execution."),Object(r.b)("li",{parentName:"ul"},"object"," deferredStateRootWithAux: Information of deferred state root")),Object(r.b)("h4",{id:"user-content-example-20"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.getBlock("0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a");\n {\n  "miner": "0x0000000000000000000000000000000000000015",\n  "hash": "0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a",\n  "parentHash": "0xa378c9e283c08eac0e2ac51a8c19e61717af812a157eb914d35b171ed20920b9",\n  "refereeHashes": [],\n  "epochNumber": 925836,\n  "stable": true,\n  "nonce": "0xaaa4a571ad424ec",\n  "gasLimit": 3000000000,\n  "difficulty": "21351313",\n  "height": 925836,\n  "size": 384,\n  "blame": 0,\n  "adaptive": false,\n  "timestamp": 1570608173,\n  "transactionsRoot": "0xbe7a9e531d55ed950a217272afa035f57f6c512ca249bae19e214cf2b470562e"\n  "transactions": [\n    "0x3910617de2a689f79bccd3d36866f4afd9ca93732c8e7be280a84190db701190"\n  ],\n  "deferredLogsBloomHash": "0xd397b3b043d87fcd6fad1291ff0bfd16401c274896d8c63a923727f077b8e0b5",\n  "deferredReceiptsRoot": "0x522717233b96e0a03d85f02f8127aa0e23ef2e0865c95bb7ac577ee3754875e4",\n  "deferredStateRoot": "0xc4ec82320df3b5ce48e22d33cc82f665a274dc920796a3e206be44682b7812a2",\n  "deferredStateRootWithAux": {\n    "auxInfo": {\n      "intermediateDeltaEpochId": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",\n      "previousSnapshotRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"\n    },\n    "stateRoot": {\n      "deltaRoot": "0xbc71c52f0dae840fd8815de081a2774927077714a5fe7c342b0e5e81f7bcd38e",\n      "intermediateDeltaRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",\n      "snapshotRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"\n    }\n  },\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.getBlock("0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a", true);\n {\n  "adaptive": false,\n  "blame": 0,\n  "deferredLogsBloomHash": "0xd397b3b043d87fcd6fad1291ff0bfd16401c274896d8c63a923727f077b8e0b5",\n  "deferredReceiptsRoot": "0x522717233b96e0a03d85f02f8127aa0e23ef2e0865c95bb7ac577ee3754875e4",\n  "deferredStateRoot": "0xc4ec82320df3b5ce48e22d33cc82f665a274dc920796a3e206be44682b7812a2",\n  "deferredStateRootWithAux": {\n    "auxInfo": {\n      "intermediateDeltaEpochId": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",\n      "previousSnapshotRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"\n    },\n    "stateRoot": {\n      "deltaRoot": "0xbc71c52f0dae840fd8815de081a2774927077714a5fe7c342b0e5e81f7bcd38e",\n      "intermediateDeltaRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",\n      "snapshotRoot": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"\n    }\n  },\n  "difficulty": "21351313",\n  "epochNumber": 925836,\n  "gasLimit": 3000000000,\n  "hash": "0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a",\n  "height": 925836,\n  "miner": "0x0000000000000000000000000000000000000015",\n  "nonce": "0xaaa4a571ad424ec",\n  "parentHash": "0xa378c9e283c08eac0e2ac51a8c19e61717af812a157eb914d35b171ed20920b9",\n  "refereeHashes": [],\n  "size": 384,\n  "stable": true,\n  "timestamp": 1570608173,\n  "transactions": [\n    {\n      "blockHash": "0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a",\n      "contractCreated": null,\n      "data": "0x",\n      "from": "0xA70ddf9B9750c575Db453Eea6A041f4C8536785A",\n      "gas": 21000,\n      "gasPrice": "819",\n      "hash": "0x3910617de2a689f79bccd3d36866f4afd9ca93732c8e7be280a84190db701190",\n      "nonce": 921,\n      "r": "0x985743d5d627e8f93e243bfd71e401f7bf5c7b098afeb910952df789312cc7b1",\n      "s": "0xaaf07bc11d56516f90697fb0f1b8140ec9b252c66e8f3172799e2829d457775",\n      "status": "0x0",\n      "to": "0xbbd9E9bE525AB967e633BcDAEaC8bD5723ED4D6B",\n      "transactionIndex": 0,\n      "v": 1,\n      "value": "1000000000000000000"\n    }\n  ],\n  "transactionsRoot": "0xbe7a9e531d55ed950a217272afa035f57f6c512ca249bae19e214cf2b470562e"\n}\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxgettransaction"},"ConfluxWeb.cfx.getTransaction"),Object(r.b)("p",null,"Returns a transaction matching the given transaction hash."),Object(r.b)("p",null,"async function getTransaction(transactionHash)"),Object(r.b)("h4",{id:"user-content-parameters-10"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"transactionHash"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The transaction hash.")))),Object(r.b)("h4",{id:"user-content-return-10"},"Return"),Object(r.b)("p",null,"Promise.<object>"," The transaction object"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"string"," blockHash: Hash of the block where this transaction was in and got executed. ","null"," when its pending."),Object(r.b)("li",{parentName:"ul"},"number"," transactionIndex: Integer of the transactions index position in the block."),Object(r.b)("li",{parentName:"ul"},"string"," hash: Hash of the transaction."),Object(r.b)("li",{parentName:"ul"},"number"," nonce: The number of transactions made by the sender prior to this one."),Object(r.b)("li",{parentName:"ul"},"string"," from: Address of the sender."),Object(r.b)("li",{parentName:"ul"},"string"," to: Address of the receiver. null when its a contract creation transaction."),Object(r.b)("li",{parentName:"ul"},"string"," value: Value transferred in Drip."),Object(r.b)("li",{parentName:"ul"},"string"," data: The data send along with the transaction."),Object(r.b)("li",{parentName:"ul"},"number"," gas: Gas provided by the sender."),Object(r.b)("li",{parentName:"ul"},"number"," gasPrice: Gas price provided by the sender in Drip."),Object(r.b)("li",{parentName:"ul"},"string"," status: '0x0' successful execution; '0x1' exception happened but nonce still increased; '0x2' exception happened and nonce didn't increase."),Object(r.b)("li",{parentName:"ul"},"string|null"," contractCreated: The contract address created, if the transaction was a contract creation, otherwise null."),Object(r.b)("li",{parentName:"ul"},"string"," r: ECDSA signature r"),Object(r.b)("li",{parentName:"ul"},"string"," s: ECDSA signature s"),Object(r.b)("li",{parentName:"ul"},"string"," v: ECDSA recovery id")),Object(r.b)("h4",{id:"user-content-example-21"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.getTransaction("0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a");\n {\n  "blockHash": "0xdf19947ee92cae1de92fd05d949c654afa4afb77ce42024533d5b47cb861575a",\n  "transactionIndex": 0,\n  "hash": "0x3910617de2a689f79bccd3d36866f4afd9ca93732c8e7be280a84190db701190",\n  "nonce": 921,\n  "from": "0xA70ddf9B9750c575Db453Eea6A041f4C8536785A",\n  "to": "0xbbd9E9bE525AB967e633BcDAEaC8bD5723ED4D6B",\n  "value": "1000000000000000000"\n  "data": "0x",\n  "gas": 21000,\n  "gasPrice": "819",\n  "status": "0x0",\n  "contractCreated": null,\n  "r": "0x985743d5d627e8f93e243bfd71e401f7bf5c7b098afeb910952df789312cc7b1",\n  "s": "0xaaf07bc11d56516f90697fb0f1b8140ec9b252c66e8f3172799e2829d457775",\n  "v": 1,\n}\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxgettransactioncount"},"ConfluxWeb.cfx.getTransactionCount"),Object(r.b)("p",null,"Get the numbers of transactions sent from this address."),Object(r.b)("p",null,"async function getTransactionCount(address,defaultEpoch)"),Object(r.b)("h4",{id:"user-content-parameters-11"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"address"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The address to get the numbers of transactions from.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"defaultEpoch"),Object(r.b)("td",{parentName:"tr"},"number","|","string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"confluxWeb.cfx.defaultEpoch"),Object(r.b)("td",{parentName:"tr"},"If you pass this parameter it will not use the default epoch.")))),Object(r.b)("h4",{id:"user-content-return-11"},"Return"),Object(r.b)("p",null,"Promise.<number>"," The number of transactions sent from the given address."),Object(r.b)("h4",{id:"user-content-example-22"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.getTransactionCount("0xa70ddf9b9750c575db453eea6a041f4c8536785a");\n 974\n\n > await confluxWeb.cfx.getTransactionCount("0xa70ddf9b9750c575db453eea6a041f4c8536785a", \'earliest\');\n 0\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxsendsignedtransaction"},"ConfluxWeb.cfx.sendSignedTransaction"),Object(r.b)("p",null,"Sends an already signed transaction, generated for example using confluxWeb.cfx.accounts.signTransaction"),Object(r.b)("p",null,"async function sendSignedTransaction(signedTransactionData)"),Object(r.b)("h4",{id:"user-content-parameters-12"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"signedTransactionData"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"Signed transaction data in HEX format")))),Object(r.b)("h4",{id:"user-content-return-12"},"Return"),Object(r.b)("p",null,"Promise.<string>"," Transaction hash"),Object(r.b)("h4",{id:"user-content-example-23"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > const ConfluxTx = require('confluxjs-transaction');\n > const tx = new ConfluxTx({\n    nonce: '0x03',\n    gasPrice: '0x01',\n    gasLimit: '0x5208', // 21000\n    to: '0x1ead8630345121d19ee3604128e5dc54b36e8ea6', // ADDRESS_TO\n    value: '0x01',\n  });\n > tx.sign(Buffer.from('a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393', 'hex')); // KEY_FROM\n > await confluxWeb.cfx.sendSignedTransaction('0x' + tx.serialize().toString('hex'));\n 0x200b930e95b3c8c54978499c6407ef71fc96a83eced88640fae59b75e1d16ef4\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxsigntransaction"},"ConfluxWeb.cfx.signTransaction"),Object(r.b)("p",null,"Signs a transaction. This account needs to be unlocked."),Object(r.b)("p",null,"async function signTransaction(rawTx)"),Object(r.b)("h4",{id:"user-content-parameters-13"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"rawTx"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"rawTx.from"),Object(r.b)("td",{parentName:"tr"},"number"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"An address or index of a local wallet in confluxWeb.cfx.accounts.wallet.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"rawTx.to"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The destination address of the message, left undefined for a contract-creation transaction.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"rawTx.value"),Object(r.b)("td",{parentName:"tr"},"number","|","string","|","BN","|","BigNumber"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The value transferred for the transaction in drip, also the endowment if it\u2019s a contract-creation transaction.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"rawTx.gas"),Object(r.b)("td",{parentName:"tr"},"number"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"To-Be-Determined"),Object(r.b)("td",{parentName:"tr"},"The amount of gas to use for the transaction (unused gas is refunded).")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"rawTx.gasPrice"),Object(r.b)("td",{parentName:"tr"},"number","|","string","|","BN","|","BigNumber"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"confluxWeb.cfx.gasPrice"),Object(r.b)("td",{parentName:"tr"},"The price of gas for this transaction in drip.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"rawTx.data"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"Either a ABI byte string containing the data of the function call on a contract, or in the case of a contract-creation transaction the initialisation code.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"rawTx.nonce"),Object(r.b)("td",{parentName:"tr"},"number"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.")))),Object(r.b)("h4",{id:"user-content-return-13"},"Return"),Object(r.b)("p",null,"Promise.<object>"," The RLP encoded transaction. The raw property can be used to send the transaction using confluxWeb.cfx.sendSignedTransaction."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"string"," rawTransaction: Raw transaction string"),Object(r.b)("li",{parentName:"ul"},"string"," messageHash: Hash of transaction for calculating signature"),Object(r.b)("li",{parentName:"ul"},"string"," r: ECDSA signature r"),Object(r.b)("li",{parentName:"ul"},"string"," s: ECDSA signature s"),Object(r.b)("li",{parentName:"ul"},"string"," v: ECDSA recovery id")),Object(r.b)("h4",{id:"user-content-example-24"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.cfx.accounts.wallet.add(\'a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393\'); // KEY_FROM\n > await confluxWeb.cfx.signTransaction({\n    from: 0, // index\n    nonce: 0, // make nonce appropriate\n    gasPrice: 10,\n    gas: 21000,\n    value: new BN(\'300000000000000000\'), // 300000000000000000 drip === 0.3 cfx token\n    to: \'0x1ead8630345121d19ee3604128e5dc54b36e8ea6\', // ADDRESS_TO\n    data: \'\',\n  });\n\n {\n  "messageHash": "53aec3cdccb8ab438303ece4559fc4464a118416828d8c7c0427f5debcd8feae",\n  "r": "0x1feaa7a3d6ae22c013b0987e8fa8e39ff1df1e6080c95d7d5e085e2cd9b02ff2",\n  "s": "0x0451df58547f0e0ad36d06058cd0c8cfa4eb201b4d09255f56ba0d750e520a67",\n  "v": "0x01",\n  "rawTransaction": "0xf867800a825208941ead8630345121d19ee3604128e5dc54b36e8ea6880429d069189e00008001a01feaa7a3d6ae22c013b0987e8fa8e39ff1df1e6080c95d7d5e085e2cd9b02ff2a00451df58547f0e0ad36d06058cd0c8cfa4eb201b4d09255f56ba0d750e520a67"\n }\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxcall"},"ConfluxWeb.cfx.call"),Object(r.b)("p",null,"Executes a message call transaction, which is directly executed in the VM of the node, but never mined into the blockchain."),Object(r.b)("p",null,"async function call(callObject,defaultEpoch)"),Object(r.b)("h4",{id:"user-content-parameters-14"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"callObject"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A transaction object, with the difference that for calls the from property is optional as well.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"defaultEpoch"),Object(r.b)("td",{parentName:"tr"},"string","|","number"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"conflux.cfx.defaultEpoch"),Object(r.b)("td",{parentName:"tr"})))),Object(r.b)("h4",{id:"user-content-return-14"},"Return"),Object(r.b)("p",null,"Promise.<string>"," The returned data of the call, e.g. A smart contract functions return value."),Object(r.b)("h4",{id:"user-content-example-25"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.call({\n    to: "0x11f4d0a3c12e86b4b5f39b213f7e19d048276dae", // contract address\n    data: "0xc6888fa10000000000000000000000000000000000000000000000000000000000000003"\n  })\n 0x000000000000000000000000000000000000000000000000000000000000000a\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxestimategas"},"ConfluxWeb.cfx.estimateGas"),Object(r.b)("p",null,"Executes a message call or transaction and returns the amount of the gas used."),Object(r.b)("p",null,"async function estimateGas(callObject)"),Object(r.b)("h4",{id:"user-content-parameters-15"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"callObject"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A transaction object, with the difference that for calls the from property is optional as well.")))),Object(r.b)("h4",{id:"user-content-return-15"},"Return"),Object(r.b)("p",null,"Promise.<number>"," - the used gas for the simulated call/transaction."),Object(r.b)("h4",{id:"user-content-example-26"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.estimateGas({\n    to: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",\n    data: "0xc6888fa10000000000000000000000000000000000000000000000000000000000000003"\n  })\n 0x0000000000000000000000000000000000000000000000000000000000000015\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxgettransactionreceipt"},"ConfluxWeb.cfx.getTransactionReceipt"),Object(r.b)("p",null,"Returns the receipt of a transaction by transaction hash."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: The receipt is not available for pending transactions and returns null.")),Object(r.b)("p",null,"async function getTransactionReceipt(txHash)"),Object(r.b)("h4",{id:"user-content-parameters-16"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"txHash"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The transaction hash.")))),Object(r.b)("h4",{id:"user-content-return-16"},"Return"),Object(r.b)("p",null,"Promise.<object>"," A transaction receipt object, or null when no receipt was found."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"boolean"," status: ","true"," if the transaction was successful; ","false",", if the EVM reverted the transaction."),Object(r.b)("li",{parentName:"ul"},"number"," outcomeStatus: 1 status ","true","; 0 status ","false","."),Object(r.b)("li",{parentName:"ul"},"string"," stateRoot: The state root of transaction execution."),Object(r.b)("li",{parentName:"ul"},"number"," epochNumber: Epoch number where this transaction was in."),Object(r.b)("li",{parentName:"ul"},"string"," blockHash: Hash of the block where this transaction was in."),Object(r.b)("li",{parentName:"ul"},"string"," transactionHash: Hash of the transaction."),Object(r.b)("li",{parentName:"ul"},"number"," index: Integer of the transactions index position in the block."),Object(r.b)("li",{parentName:"ul"},"string"," from: Address of the sender."),Object(r.b)("li",{parentName:"ul"},"string"," to: Address of the receiver. null when its a contract creation transaction."),Object(r.b)("li",{parentName:"ul"},"string|null"," contractCreated: The contract address created, if the transaction was a contract creation, otherwise null."),Object(r.b)("li",{parentName:"ul"},"number"," gasUsed: The amount of gas used by this specific transaction alone."),Object(r.b)("li",{parentName:"ul"},"[object]"," logs: Array of log objects, which this transaction generated."),Object(r.b)("li",{parentName:"ul"},"[string]"," logs[].address: The address of the contract executing at the point of the ","LOG"," operation."),Object(r.b)("li",{parentName:"ul"},"[string]"," logs[].topics: The topics associated with the ","LOG"," operation."),Object(r.b)("li",{parentName:"ul"},"[string]"," logs[].data: The data associated with the ","LOG"," operation."),Object(r.b)("li",{parentName:"ul"},"string"," logsBloom:")),Object(r.b)("h4",{id:"user-content-example-27"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > await confluxWeb.cfx.getTransactionReceipt('0x689258ba9fe2c25bcdc43ebb5c9018d1b56d25b1c87de1b371a19f5548c16dc1');\n {\n  status: true,\n  outcomeStatus: 0,\n  stateRoot: '0x75df853d267b40a98f6fe1103a510822bc1582894e8a9e95eb9ff0697545e4d2',\n  epochNumber: 1017673,\n  blockHash: '0xdefb3add0256b12c80f6e4fddde81da9c93ec88861cbee14051379f79624f911',\n  transactionHash: '0x689258ba9fe2c25bcdc43ebb5c9018d1b56d25b1c87de1b371a19f5548c16dc1',\n  index: 0,\n  from: '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b',\n  to: '0x1ead8630345121d19ee3604128e5dc54b36e8ea6',\n  contractCreated: null,\n  gasUsed: 21000,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n }\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxgetpastlogs"},"ConfluxWeb.cfx.getPastLogs"),Object(r.b)("p",null,"Gets past logs, matching the given options."),Object(r.b)("p",null,"async function getPastLogs(options)"),Object(r.b)("h4",{id:"user-content-parameters-17"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.fromEpoch"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The number of the earliest block")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.toEpoch"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The number of the latest block")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.address"),Object(r.b)("td",{parentName:"tr"},"string","|","Array","[string]"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"An address or a list of addresses to only get logs from particular account(s).")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.topics"),Object(r.b)("td",{parentName:"tr"},"array"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"An array of values which must each appear in the log entries. The order is important, if you want to leave topics out use null, e.g. ","[null, '0x12...']",". You can also pass an array for each topic with options for that topic e.g. [null, ","['option1', 'option2']","]")))),Object(r.b)("h4",{id:"user-content-return-17"},"Return"),Object(r.b)("p",null,"Promise.<Array.<object>>"," Array of log objects."),Object(r.b)("h4",{id:"user-content-example-28"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await confluxWeb.cfx.getPastLogs({\n    fromEpoch: \'0x0\',\n    toEpoch: \'latest_mined\',\n    address: \'0x169a10a431130B2F4853294A4a966803668af385\'\n  });\n\n [\n   {\n      "address": "0x169a10a431130B2F4853294A4a966803668af385",\n      "blockHash": "0x9f18cbbbc432d678b94ee6446e9305abf8f02deb0b03877cc0c71c0a71c08faf",\n      "epochNumber": "0x0",\n      "data": "0x",\n      "logIndex": 0,\n      "removed": false,\n      "topics": [\n        "0x44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339",\n        "0x000000000000000000000000c24a31039a4dfc9ee9039bd9241a0c7848b92ae1"\n      ],\n      "transactionHash": "0xb777fc8ee9c5b5f6eb2b1c7d73106f07eb1692b9db08d9f65affafb82641559f",\n      "transactionIndex": 0,\n      "transactionLogIndex": "0x0",\n      "type": "mined",\n      "id": "log_0x5157483fef4019b6a231963496322bbf123b2559f73eef47f60dd5d1b1364fe4"\n    },\n   ...\n ]\n')),Object(r.b)("hr",null),Object(r.b)("h2",{id:"user-content-confluxwebcfxaccount"},"ConfluxWeb.cfx.account"),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccountcreate"},"ConfluxWeb.cfx.account.create"),Object(r.b)("p",null,"Generates an account object with private key and public key."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: compare to eth latest, we don\u2019t have sign methods in the return account object")),Object(r.b)("p",null,"function create(entropy)"),Object(r.b)("h4",{id:"user-content-parameters-18"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"entropy"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A random string to increase entropy. If given it should be at least 32 characters. If none is given a random string will be generated using randomHex.")))),Object(r.b)("h4",{id:"user-content-return-18"},"Return"),Object(r.b)("p",null,"object"," The account object."),Object(r.b)("h4",{id:"user-content-example-29"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.accounts.create();\n Account {\n  address: '0xbaE14daA250D6BCE69E695217AE8B3ce1dfF7AAe',\n  privateKey:\n   '0xed66cd654e2d714445dd159801f7e8144d227715c1eb33865d44c056d8e23399',\n  ...\n }\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccountprivatekeytoaccount"},"ConfluxWeb.cfx.account.privateKeyToAccount"),Object(r.b)("p",null,"Creates an account object from a private key."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: compare to eth latest, we don\u2019t have sign methods in the return account object")),Object(r.b)("p",null,"function privateKeyToAccount(privateKey)"),Object(r.b)("h4",{id:"user-content-parameters-19"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"privateKey"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The private key to convert.")))),Object(r.b)("h4",{id:"user-content-return-19"},"Return"),Object(r.b)("p",null,"object"," The account object."),Object(r.b)("h4",{id:"user-content-example-30"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.accounts.privateKeyToAccount('0xed66cd654e2d714445dd159801f7e8144d227715c1eb33865d44c056d8e23399');\n Account {\n  address: '0xbaE14daA250D6BCE69E695217AE8B3ce1dfF7AAe',\n  privateKey:\n   '0xed66cd654e2d714445dd159801f7e8144d227715c1eb33865d44c056d8e23399',\n  ...\n }\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccountrecovertransaction"},"ConfluxWeb.cfx.account.recoverTransaction"),Object(r.b)("p",null,"Recovers the Conflux address which was used to sign the given RLP encoded transaction."),Object(r.b)("p",null,"function recoverTransaction(rawTransaction)"),Object(r.b)("h4",{id:"user-content-parameters-20"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"rawTransaction"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The RLP encoded transaction.")))),Object(r.b)("h4",{id:"user-content-return-20"},"Return"),Object(r.b)("p",null,"string"," The Conflux address used to sign this transaction."),Object(r.b)("h4",{id:"user-content-example-31"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.accounts.recoverTransaction('0xf867800a825208941ead8630345121d19ee3604128e5dc54b36e8ea6880429d069189e00008001a01feaa7a3d6ae22c013b0987e8fa8e39ff1df1e6080c95d7d5e085e2cd9b02ff2a00451df58547f0e0ad36d06058cd0c8cfa4eb201b4d09255f56ba0d750e520a67');\n \"0xbbd9E9bE525AB967e633BcDAEaC8bD5723ED4D6B\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccounthashmessage"},"ConfluxWeb.cfx.account.hashMessage"),Object(r.b)("p",null,"function hashMessage(message)"),Object(r.b)("h4",{id:"user-content-parameters-21"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"message"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A message to hash, if its HEX it will be UTF8 decoded before.")))),Object(r.b)("h4",{id:"user-content-return-21"},"Return"),Object(r.b)("p",null,"string"," The hashed message"),Object(r.b)("h4",{id:"user-content-example-32"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.cfx.accounts.hashMessage("Hello World");\n "0xa1de988600a42c4b4ab089b619297c17d53cffae5d5120d82d8a92d0bb3b78f2"\n\n > confluxWeb.cfx.accounts.hashMessage(confluxWeb.cfx.utf8ToHex("Hello World")); // the below results in the same hash\n "0xa1de988600a42c4b4ab089b619297c17d53cffae5d5120d82d8a92d0bb3b78f2"\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccountsign"},"ConfluxWeb.cfx.account.sign"),Object(r.b)("p",null,"Signs arbitrary data. This data is before UTF-8 HEX decoded and enveloped as follows:\n",'"\\x19Ethereum Signed Message:\\n" + message.length + message'),Object(r.b)("p",null,"function sign(data,privateKey)"),Object(r.b)("h4",{id:"user-content-parameters-22"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"data"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The data to sign.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"privateKey"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The private key to sign with.")))),Object(r.b)("h4",{id:"user-content-return-22"},"Return"),Object(r.b)("p",null,"object"," "),Object(r.b)("h4",{id:"user-content-example-33"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.cfx.accounts.sign(\'Hello World\', \'a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393\');\n {\n  "message": "Hello World",\n  "messageHash": "0xa1de988600a42c4b4ab089b619297c17d53cffae5d5120d82d8a92d0bb3b78f2",\n  "v": "0x1b",\n  "r": "0x14e05a1ff41165dc420414e96acd7710a49ff05eecbd2caf520ac8d2e37426b0",\n  "s": "0x4236443a89cd5a5d14559bc5c115988b704d40dea7e39ed087ae80cd7822f99c",\n  "signature": "0x14e05a1ff41165dc420414e96acd7710a49ff05eecbd2caf520ac8d2e37426b04236443a89cd5a5d14559bc5c115988b704d40dea7e39ed087ae80cd7822f99c1b"\n }\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccountrecover"},"ConfluxWeb.cfx.account.recover"),Object(r.b)("p",null,"Recovers the Conflux address which was used to sign the given data."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"confluxWeb.cfx.accounts.recover(message, signature ","[, preFixed]",");")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"confluxWeb.cfx.accounts.recover(message, v, r, s ","[, preFixed]",");")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"confluxWeb.cfx.accounts.recover(signatureObject);")),Object(r.b)("p",null,"function recover(message,signature,r,s,v,preFixed,signatureObject)"),Object(r.b)("h4",{id:"user-content-parameters-23"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"message"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"signature"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The raw RLP encoded signature, OR parameter 2-4 as v, r, s values.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"r"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"First 32 bytes of the signature")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"s"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"Next 32 bytes of the signature")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"v"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"Recovery value")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"preFixed"),Object(r.b)("td",{parentName:"tr"},"boolean"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},'If the last parameter is true, the given message will NOT automatically be prefixed with "\\x19Ethereum Signed Message:\\n" + message.length + message, and assumed to be already prefixed.')),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"signatureObject"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"signatureObject.messageHash"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},'The hash of the given message already prefixed with "\\x19Ethereum Signed Message:\\n" + message.length + message.')),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"signatureObject.r"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"same as ","r")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"signatureObject.s"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"same as ","s")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"signatureObject.v"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"same as ","v")))),Object(r.b)("h4",{id:"user-content-return-23"},"Return"),Object(r.b)("p",null,"string"," The Conflux address used to sign this data."),Object(r.b)("h4",{id:"user-content-example-34"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.accounts.recover({\n    messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n    v: '0x1',\n    r: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd',\n    s: '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029'\n })\n \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n\n > confluxWeb.cfx.accounts.recover('Some data', '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a02901'); // message, signature\n \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n\n > confluxWeb.cfx.accounts.recover('Some data', '0x01', '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd', '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029'); // message, v, r, s\n \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"user-content-confluxwebcfxaccountwallet"},"ConfluxWeb.cfx.account.wallet"),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccountwalletcreate"},"ConfluxWeb.cfx.account.wallet.create"),Object(r.b)("p",null,"Generates one or more accounts in the wallet. If wallets already exist they will not be overridden."),Object(r.b)("p",null,"function create(numberOfAccounts,entropy)"),Object(r.b)("h4",{id:"user-content-parameters-24"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"numberOfAccounts"),Object(r.b)("td",{parentName:"tr"},"number"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"Number of accounts to create. Leave empty to create an empty wallet.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"entropy"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A string with random characters as additional entropy when generating accounts. If given it should be at least 32 characters.")))),Object(r.b)("h4",{id:"user-content-return-24"},"Return"),Object(r.b)("p",null,"object"," The wallet object"),Object(r.b)("h4",{id:"user-content-example-35"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.accounts.wallet.create(2);\n Wallet {\n   ...\n   accounts: {\n     '0':\n      Account {\n        address: '0x52B2a035bbC4263D46a327376195e86dbaAF0b42',\n        privateKey:\n         '0x9887b79bd08ac7ee5897a24c50ee366450edd706cd8cec637cbb91234638d6bb',\n        accounts: [Accounts] },\n     '1':\n      Account {\n        address: '0x52B2a035bbC4263D46a327376195e86dbaAF0b42',\n        privateKey:\n         '0x9887b79bd08ac7ee5897a24c50ee366450edd706cd8cec637cbb91234638d6bb',\n        accounts: [Accounts] },\n   },\n   ...\n }\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccountwalletadd"},"ConfluxWeb.cfx.account.wallet.add"),Object(r.b)("p",null,"Adds an account using a private key or account object to the wallet."),Object(r.b)("p",null,"function add(account)"),Object(r.b)("h4",{id:"user-content-parameters-25"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"account"),Object(r.b)("td",{parentName:"tr"},"string","|","object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A private key or account object created with confluxWeb.cfx.accounts.create().")))),Object(r.b)("h4",{id:"user-content-return-25"},"Return"),Object(r.b)("p",null,"object"," The added account"),Object(r.b)("h4",{id:"user-content-example-36"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.accounts.wallet.add('a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393');\n Account {\n  address: '0x4060E99f892E052dF9F59126D3F1eF2240A5df97',\n  privateKey:\n   'a816a06117e572ca7ae2f786a046d2bc478051d0717bf5cc4f5397923258d393',\n  ...\n }\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccountwalletremove"},"ConfluxWeb.cfx.account.wallet.remove"),Object(r.b)("p",null,"Removes an account from the wallet."),Object(r.b)("p",null,"function remove(address)"),Object(r.b)("h4",{id:"user-content-parameters-26"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"address"),Object(r.b)("td",{parentName:"tr"},"string","|","number"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The account address, or index in the wallet.")))),Object(r.b)("h4",{id:"user-content-return-26"},"Return"),Object(r.b)("p",null,"boolean"," true if the wallet was removed. false if it couldn\u2019t be found."),Object(r.b)("h4",{id:"user-content-example-37"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.accounts.wallet.remove('0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b');\n true\n\n > confluxWeb.cfx.accounts.wallet.remove(0);\n true\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxaccountwalletclear"},"ConfluxWeb.cfx.account.wallet.clear"),Object(r.b)("p",null,"Securely empties the wallet and removes all its accounts."),Object(r.b)("p",null,"function clear()"),Object(r.b)("h4",{id:"user-content-parameters-27"},"Parameters"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-return-27"},"Return"),Object(r.b)("p",null,"Object"," The wallet object."),Object(r.b)("h4",{id:"user-content-example-38"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.cfx.accounts.wallet.clear();\n Wallet {\n   accounts: {},\n   accountsIndex: 0\n   ...\n }\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"user-content-confluxwebcfxcontractmethods-1"},"ConfluxWeb.cfx.Contract.methods"),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractmethodsencodeabi"},"ConfluxWeb.cfx.Contract.methods.encodeABI"),Object(r.b)("p",null,"Encodes the ABI for this method.\nThis can be used to send a transaction, call a method,\nor pass it into another smart contracts method as arguments."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: contract instance create code see Contract.constructor")),Object(r.b)("p",null,"function encodeABI()"),Object(r.b)("h4",{id:"user-content-parameters-28"},"Parameters"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-return-28"},"Return"),Object(r.b)("p",null,"string"," The encoded ABI byte code to send via a transaction or call."),Object(r.b)("h4",{id:"user-content-example-39"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > await contract.methods.inc(1).encodeABI();\n "0x812600df0000000000000000000000000000000000000000000000000000000000000001"\n\n > await contract.methods.count().encodeABI();\n "0x06661abd"\n')),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractmethodsestimategas"},"ConfluxWeb.cfx.Contract.methods.estimateGas"),Object(r.b)("p",null,"Will call estimate the gas a method execution will take when executed in the EVM without sending any transaction. The estimation can differ from the actual gas used when later sending a transaction, as the state of the smart contract can be different at that time."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: contract instance create code see Contract.constructor")),Object(r.b)("p",null,"async function estimateGas()"),Object(r.b)("h4",{id:"user-content-parameters-29"},"Parameters"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-return-29"},"Return"),Object(r.b)("p",null,"Promise.<number>"," "),Object(r.b)("h4",{id:"user-content-example-40"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > await contract.methods.inc(1).estimateGas();\n 26928\n\n > await contract.methods.count().estimateGas();\n 21655\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractmethodscall"},"ConfluxWeb.cfx.Contract.methods.call"),Object(r.b)("p",null,"Will call a \u201cconstant\u201d method and execute its smart contract method in the EVM without sending any transaction.\nNote calling can not alter the smart contract state."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: contract instance create code see Contract.constructor")),Object(r.b)("p",null,"async function call()"),Object(r.b)("h4",{id:"user-content-parameters-30"},"Parameters"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-return-30"},"Return"),Object(r.b)("p",null,"Promise"," contract method return value"),Object(r.b)("h4",{id:"user-content-example-41"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > await contract.methods.inc(1).call();\n BigNumber { _hex: '0xff' }\n\n > await contract.methods.count().call();\n BigNumber { _hex: '0xfe' }\n")),Object(r.b)("h3",{id:"user-content-confluxwebcfxcontractmethodssend"},"ConfluxWeb.cfx.Contract.methods.send"),Object(r.b)("p",null,"Will send a transaction to the smart contract and execute its method.\nNote this can alter the smart contract state."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: contract instance create code see Contract.constructor")),Object(r.b)("p",null,"async function send(options)"),Object(r.b)("h4",{id:"user-content-parameters-31"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options"),Object(r.b)("td",{parentName:"tr"},"object"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"})),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.from"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The address the transaction should be sent from.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.gasPrice"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"contract.defaultGasPrice"),Object(r.b)("td",{parentName:"tr"},"The gas price in wei to use for this transaction.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.gas"),Object(r.b)("td",{parentName:"tr"},"number"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},"contract.defaultGas"),Object(r.b)("td",{parentName:"tr"},"The maximum gas provided for this transaction (gas limit).")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"options.value"),Object(r.b)("td",{parentName:"tr"},"number","|","string","|","BN","|","BigNumber"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The value transferred for the transaction in drip.")))),Object(r.b)("h4",{id:"user-content-return-31"},"Return"),Object(r.b)("p",null,"Promise.<string>"," Transaction hash."),Object(r.b)("h4",{id:"user-content-example-42"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > await contract.methods.inc(1).send({\n    from: '0xbbd9e9be525ab967e633bcdaeac8bd5723ed4d6b',\n    gas: 100000000,\n    gasPrice: 819\n });\n \"0xb01101228cbd8619ab1f8f017530ff945b655472be211eb828b31bc7c97b9d5c\"\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"user-content-confluxwebutils-1"},"ConfluxWeb.utils"),Object(r.b)("h3",{id:"user-content-confluxwebutilsrandomhex"},"ConfluxWeb.utils.randomHex"),Object(r.b)("p",null,"The randomHex library to generate cryptographically strong pseudo-random HEX strings from a given byte size."),Object(r.b)("p",null,"function randomHex(bytesSize)"),Object(r.b)("h4",{id:"user-content-parameters-32"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"bytesSize"),Object(r.b)("td",{parentName:"tr"},"number"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"given byte size")))),Object(r.b)("h4",{id:"user-content-return-32"},"Return"),Object(r.b)("p",null,"string"," The generated random HEX string."),Object(r.b)("h4",{id:"user-content-example-43"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.randomHex(32)\n 0xd3185018552117d2c4b5277307c455b4746267b27ea133abd288c0b136c3865c\n\n > confluxWeb.utils.randomHex(4)\n 0x472ace2a\n\n > confluxWeb.utils.randomHex(2)\n 0x52ed\n\n > confluxWeb.utils.randomHex(1)\n 0x3b\n\n > confluxWeb.utils.randomHex(0)\n 0x\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilsisbn"},"ConfluxWeb.utils.isBN"),Object(r.b)("p",null,"Checks if a given value is a BN.js instance."),Object(r.b)("p",null,"function isBN(bn)"),Object(r.b)("h4",{id:"user-content-parameters-33"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"bn"),Object(r.b)("td",{parentName:"tr"},"BN"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"An BN.js instance")))),Object(r.b)("h4",{id:"user-content-return-33"},"Return"),Object(r.b)("p",null,"boolean"," "),Object(r.b)("h4",{id:"user-content-example-44"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > const bn = new BN(10)\n > confluxWeb.utils.isBN(bn)\n true\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilssha3"},"ConfluxWeb.utils.sha3"),Object(r.b)("p",null,"Will calculate the sha3 of the input."),Object(r.b)("p",null,"function sha3(str)"),Object(r.b)("h4",{id:"user-content-parameters-34"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"str"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A string to hash")))),Object(r.b)("h4",{id:"user-content-return-34"},"Return"),Object(r.b)("p",null,"string"," the result hash."),Object(r.b)("h4",{id:"user-content-example-45"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.sha3('234');\n \"0xc1912fee45d61c87cc5ea59dae311904cd86b84fee17cc96966216f811ce6a79\"\n\n > confluxWeb.utils.keccak256('234'); // alias\n \"0xc1912fee45d61c87cc5ea59dae311904cd86b84fee17cc96966216f811ce6a79\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilssoliditysha3"},"ConfluxWeb.utils.soliditySha3"),Object(r.b)("p",null,"Will calculate the sha3 of given input parameters in the same way solidity would.\nThis means arguments will be ABI converted and tightly packed before being hashed."),Object(r.b)("p",null,"function soliditySha3(args)"),Object(r.b)("h4",{id:"user-content-parameters-35"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"...args"),Object(r.b)("td",{parentName:"tr"},"Array.<(string","|","number","|","object","|","BN)>"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"})))),Object(r.b)("h4",{id:"user-content-return-35"},"Return"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-example-46"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.soliditySha3('234564535', '0xfff23243', true, -10);\n \"0x3e27a893dc40ef8a7f0841d96639de2f58a132be5ae466d40087a2cfa83b7179\"\n\n > confluxWeb.utils.soliditySha3('Hello!%'); // auto detects: string\n \"0x661136a4267dba9ccdf6bfddb7c00e714de936674c4bdb065a531cf1cb15c7fc\"\n\n > confluxWeb.utils.soliditySha3('234'); // auto detects: uint256\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3(0xea); // same as above\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3(new BN('234')); // same as above\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3({type: 'uint256', value: '234'}); // same as above\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3({t: 'uint', v: new BN('234')}); // same as above\n \"0x61c831beab28d67d1bb40b5ae1a11e2757fa842f031a2d0bc94a7867bc5d26c2\"\n\n > confluxWeb.utils.soliditySha3('0x407D73d8a49eeb85D32Cf465507dd71d507100c1');\n \"0x4e8ebbefa452077428f93c9520d3edd60594ff452a29ac7d2ccc11d47f3ab95b\"\n\n > confluxWeb.utils.soliditySha3({t: 'bytes', v: '0x407D73d8a49eeb85D32Cf465507dd71d507100c1'}); // same result as above\n \"0x4e8ebbefa452077428f93c9520d3edd60594ff452a29ac7d2ccc11d47f3ab95b\"\n\n > confluxWeb.utils.soliditySha3({t: 'address', v: '0x407D73d8a49eeb85D32Cf465507dd71d507100c1'}); // same as above, but will do a checksum check, if its multi case\n \"0x4e8ebbefa452077428f93c9520d3edd60594ff452a29ac7d2ccc11d47f3ab95b\"\n\n > confluxWeb.utils.soliditySha3({t: 'bytes32', v: '0x407D73d8a49eeb85D32Cf465507dd71d507100c1'}); // different result as above\n \"0x3c69a194aaf415ba5d6afca734660d0a3d45acdc05d54cd1ca89a8988e7625b4\"\n\n > confluxWeb.utils.soliditySha3({t: 'string', v: 'Hello!%'}, {t: 'int8', v:-23}, {t: 'address', v: '0x85F43D8a49eeB85d32Cf465507DD71d507100C1d'});\n \"0xa13b31627c1ed7aaded5aecec71baf02fe123797fffd45e662eac8e06fbe4955\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilsishex"},"ConfluxWeb.utils.isHex"),Object(r.b)("p",null,"Checks if a given string is a HEX string."),Object(r.b)("p",null,"function isHex(hex)"),Object(r.b)("h4",{id:"user-content-parameters-36"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"hex"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The given HEX string.")))),Object(r.b)("h4",{id:"user-content-return-36"},"Return"),Object(r.b)("p",null,"boolean"," "),Object(r.b)("h4",{id:"user-content-example-47"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.isHex('0xc1912');\n true\n\n > confluxWeb.utils.isHex(0xc1912);\n true\n\n > confluxWeb.utils.isHex('c1912');\n true\n\n > confluxWeb.utils.isHex(345); // this is tricky, as 345 can be a a HEX representation or a number, be careful when not having a 0x in front!\n true\n\n > confluxWeb.utils.isHex('0xZ1912');\n false\n\n > confluxWeb.utils.isHex('Hello');\n false\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilsishexstrict"},"ConfluxWeb.utils.isHexStrict"),Object(r.b)("p",null,"Checks if a given string is a HEX string. Difference to isHex() is that it expects HEX to be prefixed with 0x."),Object(r.b)("p",null,"function isHexStrict(hex)"),Object(r.b)("h4",{id:"user-content-parameters-37"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"hex"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The given HEX string.")))),Object(r.b)("h4",{id:"user-content-return-37"},"Return"),Object(r.b)("p",null,"boolean"," "),Object(r.b)("h4",{id:"user-content-example-48"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.isHexStrict('0xc1912');\n true\n\n > confluxWeb.utils.isHexStrict(0xc1912);\n false\n\n > confluxWeb.utils.isHexStrict('c1912');\n false\n\n > confluxWeb.utils.isHexStrict(345); // this is tricky, as 345 can be a a HEX representation or a number, be careful when not having a 0x in front!\n false\n\n > confluxWeb.utils.isHexStrict('0xZ1912');\n false\n\n > confluxWeb.utils.isHex('Hello');\n false\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilsisaddress"},"ConfluxWeb.utils.isAddress"),Object(r.b)("p",null,"Checks if a given string is a valid Conflux address. It will also check the checksum, if the address has upper and lowercase letters."),Object(r.b)("p",null,"function isAddress(address)"),Object(r.b)("h4",{id:"user-content-parameters-38"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"address"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"An address string.")))),Object(r.b)("h4",{id:"user-content-return-38"},"Return"),Object(r.b)("p",null,"string"," The checksum address."),Object(r.b)("h4",{id:"user-content-example-49"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.isAddress('0xc1912fee45d61c87cc5ea59dae31190fffff232d');\n true\n\n > confluxWeb.utils.isAddress('c1912fee45d61c87cc5ea59dae31190fffff232d');\n true\n\n > confluxWeb.utils.isAddress('0XC1912FEE45D61C87CC5EA59DAE31190FFFFF232D'); // as all is uppercase, no checksum will be checked\n true\n\n > confluxWeb.utils.isAddress('0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d');\n true\n\n > confluxWeb.utils.isAddress('0xC1912fEE45d61C87Cc5EA59DaE31190FFFFf232d'); // wrong checksum\n false\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilstochecksumaddress"},"ConfluxWeb.utils.toChecksumAddress"),Object(r.b)("p",null,"Will convert an upper or lowercase Conflux address to a checksum address."),Object(r.b)("p",null,"function toChecksumAddress(address)"),Object(r.b)("h4",{id:"user-content-parameters-39"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"address"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"An address string.")))),Object(r.b)("h4",{id:"user-content-return-39"},"Return"),Object(r.b)("p",null,"void"),Object(r.b)("h4",{id:"user-content-example-50"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.toChecksumAddress('0xc1912fee45d61c87cc5ea59dae31190fffff2323');\n \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n\n > confluxWeb.utils.toChecksumAddress('0XC1912FEE45D61C87CC5EA59DAE31190FFFFF232D'); // same as above\n \"0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilscheckaddresschecksum"},"ConfluxWeb.utils.checkAddressChecksum"),Object(r.b)("p",null,"Checks the checksum of a given address. Will also return false on non-checksum addresses."),Object(r.b)("p",null,"function checkAddressChecksum(address)"),Object(r.b)("h4",{id:"user-content-parameters-40"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"address"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"An address string.")))),Object(r.b)("h4",{id:"user-content-return-40"},"Return"),Object(r.b)("p",null,"boolean"," true when the checksum of the address is valid, false if its not a checksum address, or the checksum is invalid."),Object(r.b)("h4",{id:"user-content-example-51"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.checkAddressChecksum('0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d');\n true\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilstohex"},"ConfluxWeb.utils.toHex"),Object(r.b)("p",null,"Will auto convert any given value to HEX. Number strings will interpreted as numbers.\nText strings will be interpreted as UTF-8 strings."),Object(r.b)("p",null,"function toHex(value)"),Object(r.b)("h4",{id:"user-content-parameters-41"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"value"),Object(r.b)("td",{parentName:"tr"},"string","|","number","|","BN","|","BigNumber"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The input to convert to HEX.")))),Object(r.b)("h4",{id:"user-content-return-41"},"Return"),Object(r.b)("p",null,"string"," The resulting HEX string."),Object(r.b)("h4",{id:"user-content-example-52"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.utils.toHex(\'234\');\n "0xea"\n\n > confluxWeb.utils.toHex(234);\n "0xea"\n\n > confluxWeb.utils.toHex(new BN(\'234\'));\n "0xea"\n\n > confluxWeb.utils.toHex(new BigNumber(\'234\'));\n "0xea"\n\n > confluxWeb.utils.toHex(\'I have 100\u20ac\');\n "0x49206861766520313030e282ac"\n')),Object(r.b)("h3",{id:"user-content-confluxwebutilstobn"},"ConfluxWeb.utils.toBN"),Object(r.b)("p",null,"Will safely convert any given value (including BigNumber.js instances) into a BN.js instance, for handling big numbers in JavaScript."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: For just the BN.js class use utils.BN")),Object(r.b)("p",null,"function toBN(num)"),Object(r.b)("h4",{id:"user-content-parameters-42"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"num"),Object(r.b)("td",{parentName:"tr"},"number","|","string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"Number to convert to a big number.")))),Object(r.b)("h4",{id:"user-content-return-42"},"Return"),Object(r.b)("p",null,"BN"," The BN.js instance."),Object(r.b)("h4",{id:"user-content-example-53"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.toBN(1234).toString();\n \"1234\"\n\n > confluxWeb.utils.toBN('1234').add(confluxWeb.utils.toBN('1')).toString();\n \"1235\"\n\n > confluxWeb.utils.toBN('0xea').toString();\n \"234\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilshextonumber"},"ConfluxWeb.utils.hexToNumber"),Object(r.b)("p",null,"Returns the number representation of a given HEX value."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: This is not useful for big numbers, rather use utils.toBN instead.")),Object(r.b)("p",null,"function hexToNumber(hex)"),Object(r.b)("h4",{id:"user-content-parameters-43"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"hex"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A string to hash.")))),Object(r.b)("h4",{id:"user-content-return-43"},"Return"),Object(r.b)("p",null,"number"," "),Object(r.b)("h4",{id:"user-content-example-54"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.hexToNumber('0xea');\n 234\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilshextonumberstring"},"ConfluxWeb.utils.hexToNumberString"),Object(r.b)("p",null,"Returns the number representation of a given HEX value as a string."),Object(r.b)("p",null,"function hexToNumberString(hex)"),Object(r.b)("h4",{id:"user-content-parameters-44"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"hex"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A string to hash")))),Object(r.b)("h4",{id:"user-content-return-44"},"Return"),Object(r.b)("p",null,"string"," The number as a string"),Object(r.b)("h4",{id:"user-content-example-55"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.hexToNumberString('0xea');\n \"234\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilsnumbertohex"},"ConfluxWeb.utils.numberToHex"),Object(r.b)("p",null,"Returns the HEX representation of a given number value."),Object(r.b)("p",null,"function numberToHex(num)"),Object(r.b)("h4",{id:"user-content-parameters-45"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"num"),Object(r.b)("td",{parentName:"tr"},"number","|","string","|","BN","|","BigNumber"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A number as string or number.")))),Object(r.b)("h4",{id:"user-content-return-45"},"Return"),Object(r.b)("p",null,"string"," The HEX value of the given number."),Object(r.b)("h4",{id:"user-content-example-56"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.numberToHex('234');\n '0xea'\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilshextoutf8"},"ConfluxWeb.utils.hexToUtf8"),Object(r.b)("p",null,"Returns the UTF-8 string representation of a given HEX value."),Object(r.b)("p",null,"function hexToUtf8(hex)"),Object(r.b)("h4",{id:"user-content-parameters-46"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"hex"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A HEX string to convert to a UTF-8 string.")))),Object(r.b)("h4",{id:"user-content-return-46"},"Return"),Object(r.b)("p",null,"string"," The UTF-8 string."),Object(r.b)("h4",{id:"user-content-example-57"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.hexToUtf8('0x49206861766520313030e282ac');\n \"I have 100\u20ac\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilshextoascii"},"ConfluxWeb.utils.hexToAscii"),Object(r.b)("p",null,"Returns the ASCII string representation of a given HEX value."),Object(r.b)("p",null,"function hexToAscii(hex)"),Object(r.b)("h4",{id:"user-content-parameters-47"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"hex"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A HEX string to convert to a ASCII string.")))),Object(r.b)("h4",{id:"user-content-return-47"},"Return"),Object(r.b)("p",null,"string"," The ASCII string."),Object(r.b)("h4",{id:"user-content-example-58"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.hexToAscii('0x4920686176652031303021');\n \"I have 100!\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilsutf8tohex"},"ConfluxWeb.utils.utf8ToHex"),Object(r.b)("p",null,"Returns the HEX representation of a given UTF-8 string."),Object(r.b)("p",null,"function utf8ToHex(str)"),Object(r.b)("h4",{id:"user-content-parameters-48"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"str"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A UTF-8 string to convert to a HEX string.")))),Object(r.b)("h4",{id:"user-content-return-48"},"Return"),Object(r.b)("p",null,"string"," The HEX string"),Object(r.b)("h4",{id:"user-content-example-59"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.utf8ToHex('I have 100\u20ac');\n \"0x49206861766520313030e282ac\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilsasciitohex"},"ConfluxWeb.utils.asciiToHex"),Object(r.b)("p",null,"Returns the HEX representation of a given ASCII string."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: it behaves differently from 1.2.1")),Object(r.b)("p",null,"function asciiToHex(str)"),Object(r.b)("h4",{id:"user-content-parameters-49"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"str"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A ASCII string to convert to a HEX string.")))),Object(r.b)("h4",{id:"user-content-return-49"},"Return"),Object(r.b)("p",null,"string"," The HEX string"),Object(r.b)("h4",{id:"user-content-example-60"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.asciiToHex('I have 100!');\n \"0x4920686176652031303021\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilshextobytes"},"ConfluxWeb.utils.hexToBytes"),Object(r.b)("p",null,"Returns a byte array from the given HEX string."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: it behaves differently from 1.2.1")),Object(r.b)("p",null,"function hexToBytes(hex)"),Object(r.b)("h4",{id:"user-content-parameters-50"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"hex"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A HEX to convert.")))),Object(r.b)("h4",{id:"user-content-return-50"},"Return"),Object(r.b)("p",null,"array"," The byte array."),Object(r.b)("h4",{id:"user-content-example-61"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.hexToBytes('0x000000ea');\n [ 0, 0, 0, 234 ]\n\n > confluxWeb.utils.hexToBytes(0x000000ea);\n [ 234 ]\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilsbytestohex"},"ConfluxWeb.utils.bytesToHex"),Object(r.b)("p",null,"Returns a HEX string from a byte array."),Object(r.b)("p",null,"function bytesToHex(byteArray)"),Object(r.b)("h4",{id:"user-content-parameters-51"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"byteArray"),Object(r.b)("td",{parentName:"tr"},"array"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"A byte array to convert.")))),Object(r.b)("h4",{id:"user-content-return-51"},"Return"),Object(r.b)("p",null,"string"," The HEX string"),Object(r.b)("h4",{id:"user-content-example-62"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.utils.bytesToHex([ 72, 101, 108, 108, 111, 33, 36 ]);\n "0x48656c6c6f2124"\n')),Object(r.b)("h3",{id:"user-content-confluxwebutilstodrip"},"ConfluxWeb.utils.toDrip"),Object(r.b)("p",null,"Converts any cfx value value into drip."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},'NOTE: "drip" are the smallest conflux unit, and you should always make calculations in drip and convert only for display reasons.')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: can not pass a Number, only string or BN are acceptable")),Object(r.b)("p",null,"function toDrip(str,unit)"),Object(r.b)("h4",{id:"user-content-parameters-52"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"str"),Object(r.b)("td",{parentName:"tr"},"string","|","BN"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The value")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"unit"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},'"cfx"'),Object(r.b)("td",{parentName:"tr"},"The cfx to convert from. Possible units are ","['cfx', 'gdrip', 'drip']")))),Object(r.b)("h4",{id:"user-content-return-52"},"Return"),Object(r.b)("p",null,"string|BN"," If a number, or string is given it returns a number string, otherwise a BN.js instance."),Object(r.b)("h4",{id:"user-content-example-63"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.toDrip('1');\n \"1000000000000000000\"\n\n > confluxWeb.utils.toDrip('1', 'cfx');\n \"1000000000000000000\"\n\n > confluxWeb.utils.toDrip('1', 'gdrip');\n \"1000000000\"\n\n > confluxWeb.utils.toDrip('1', 'drip');\n \"1\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilsfromdrip"},"ConfluxWeb.utils.fromDrip"),Object(r.b)("p",null,"Converts any drip value into a cfx value."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},'NOTE: "drip" are the smallest conflux unit, and you should always make calculations in drip and convert only for display reasons.')),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"NOTE: can not pass a Number, only string or BN are acceptable")),Object(r.b)("p",null,"function fromDrip(str,unit)"),Object(r.b)("h4",{id:"user-content-parameters-53"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"str"),Object(r.b)("td",{parentName:"tr"},"string","|","BN"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The value in drip")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"unit"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},'"cfx"'),Object(r.b)("td",{parentName:"tr"},"The cfx to convert to. Possible units are ","['cfx', 'gdrip', 'drip']")))),Object(r.b)("h4",{id:"user-content-return-53"},"Return"),Object(r.b)("p",null,"string|BN"," If a number, or string is given it returns a number string, otherwise a BN.js instance."),Object(r.b)("h4",{id:"user-content-example-64"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.fromDrip('1');\n \"0.000000000000000001\"\n\n > confluxWeb.utils.fromDrip('1', 'cfx');\n \"0.000000000000000001\"\n\n > confluxWeb.utils.fromDrip('1', 'gdrip');\n \"0.000000001\"\n\n > confluxWeb.utils.fromDrip('1', 'gdrip');\n \"1\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilspadleft"},"ConfluxWeb.utils.padLeft"),Object(r.b)("p",null,"Adds a padding on the left of a string, Useful for adding paddings to HEX strings."),Object(r.b)("p",null,"function padLeft(value,characterAmount,sign)"),Object(r.b)("h4",{id:"user-content-parameters-54"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"value"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The string to add padding on the left.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"characterAmount"),Object(r.b)("td",{parentName:"tr"},"number"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The number of characters the total string should have.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"sign"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},'"0"'),Object(r.b)("td",{parentName:"tr"},"The character sign to use.")))),Object(r.b)("h4",{id:"user-content-return-54"},"Return"),Object(r.b)("p",null,"string"," The padded string."),Object(r.b)("h4",{id:"user-content-example-65"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.padLeft('0x3456ff', 20);\n \"0x000000000000003456ff\"\n\n > confluxWeb.utils.padLeft(0x3456ff, 20);\n \"0x000000000000003456ff\"\n\n > confluxWeb.utils.padLeft('Hello', 20, 'x');\n \"xxxxxxxxxxxxxxxHello\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilspadright"},"ConfluxWeb.utils.padRight"),Object(r.b)("p",null,"Adds a padding on the right of a string, Useful for adding paddings to HEX strings."),Object(r.b)("p",null,"function padRight(value,characterAmount,sign)"),Object(r.b)("h4",{id:"user-content-parameters-55"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"value"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The string to add padding on the right.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"characterAmount"),Object(r.b)("td",{parentName:"tr"},"number"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The number of characters the total string should have.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"sign"),Object(r.b)("td",{parentName:"tr"},"string"),Object(r.b)("td",{parentName:"tr"},"false"),Object(r.b)("td",{parentName:"tr"},'"0"'),Object(r.b)("td",{parentName:"tr"},"The character sign to use.")))),Object(r.b)("h4",{id:"user-content-return-55"},"Return"),Object(r.b)("p",null,"string"," The padded string."),Object(r.b)("h4",{id:"user-content-example-66"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"}," > confluxWeb.utils.padRight('0x3456ff', 20);\n \"0x3456ff00000000000000\"\n\n > confluxWeb.utils.padRight(0x3456ff, 20);\n \"0x3456ff00000000000000\"\n\n > confluxWeb.utils.padRight('Hello', 20, 'x');\n \"Helloxxxxxxxxxxxxxxx\"\n")),Object(r.b)("h3",{id:"user-content-confluxwebutilstotwoscomplement"},"ConfluxWeb.utils.toTwosComplement"),Object(r.b)("p",null,"Converts a negative numer into a two\u2019s complement."),Object(r.b)("p",null,"function toTwosComplement(value)"),Object(r.b)("h4",{id:"user-content-parameters-56"},"Parameters"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr"},"Name"),Object(r.b)("th",{parentName:"tr"},"Type"),Object(r.b)("th",{parentName:"tr"},"Required"),Object(r.b)("th",{parentName:"tr"},"Default"),Object(r.b)("th",{parentName:"tr"},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr"},"value"),Object(r.b)("td",{parentName:"tr"},"number","|","string","|","BigNumber"),Object(r.b)("td",{parentName:"tr"},"true"),Object(r.b)("td",{parentName:"tr"}),Object(r.b)("td",{parentName:"tr"},"The number to convert.")))),Object(r.b)("h4",{id:"user-content-return-56"},"Return"),Object(r.b)("p",null,"string"," The converted hex string."),Object(r.b)("h4",{id:"user-content-example-67"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},' > confluxWeb.utils.toTwosComplement(\'-1\');\n "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"\n\n > confluxWeb.utils.toTwosComplement(-1);\n "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"\n\n > confluxWeb.utils.toTwosComplement(\'0x1\');\n "0x0000000000000000000000000000000000000000000000000000000000000001"\n\n > confluxWeb.utils.toTwosComplement(-15);\n "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1"\n\n > confluxWeb.utils.toTwosComplement(\'-0x1\');\n "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"\n')))}d.isMDXComponent=!0},202:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));var n=a(0),b=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,b=function(e,t){if(null==e)return{};var a,n,b={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(b[a]=e[a])}return b}var d=b.a.createContext({}),s=function(e){var t=b.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o({},t,{},e)),a},u=function(e){var t=s(e.components);return b.a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return b.a.createElement(b.a.Fragment,{},t)}},i=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(a),i=n,m=u["".concat(c,".").concat(i)]||u[i]||p[i]||r;return a?b.a.createElement(m,o({ref:t},d,{components:a})):b.a.createElement(m,o({ref:t},d))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,c=new Array(r);c[0]=i;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,c[1]=o;for(var d=2;d<r;d++)c[d]=a[d];return b.a.createElement.apply(null,c)}return b.a.createElement.apply(null,a)}i.displayName="MDXCreateElement"}}]);