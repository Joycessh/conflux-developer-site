(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{178:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(9),o=(n(0),n(207)),r={},c={id:"js-conflux-sdk/docs/how_to_send_tx",title:"how_to_send_tx",description:"How to send a Conflux Transaction",source:"@site/docs/js-conflux-sdk/docs/how_to_send_tx.md",permalink:"/docs/js-conflux-sdk/docs/how_to_send_tx",editUrl:"https://github.com/Conflux-Chain/conflux-developer-site/edit/master/docs/js-conflux-sdk/docs/how_to_send_tx.md",lastUpdatedAt:1604905122},l=[{value:"A simple CFX transfer",id:"a-simple-cfx-transfer",children:[]},{value:"Transaction&#39;s stage",id:"transactions-stage",children:[]},{value:"A complete transaction",id:"a-complete-transaction",children:[]},{value:"How much <code>gas</code> and <code>storageLimit</code> a transaction need",id:"how-much-gas-and-storagelimit-a-transaction-need",children:[]},{value:"SendRawTransaction",id:"sendrawtransaction",children:[]},{value:"Why my transaction is always pending ?",id:"why-my-transaction-is-always-pending-",children:[]},{value:"Why my transaction failed?",id:"why-my-transaction-failed",children:[]},{value:"How to send a transaction with a note",id:"how-to-send-a-transaction-with-a-note",children:[]},{value:"How to build a raw transaction",id:"how-to-build-a-raw-transaction",children:[]}],s={rightToc:l};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"how-to-send-a-conflux-transaction"},"How to send a Conflux Transaction"),Object(o.b)("h3",{id:"a-simple-cfx-transfer"},"A simple CFX transfer"),Object(o.b)("p",null,"It can be very easy to send a simple transaction(transfer some CFX to another address), all you need is ",Object(o.b)("inlineCode",{parentName:"p"},"from"),", ",Object(o.b)("inlineCode",{parentName:"p"},"to"),", ",Object(o.b)("inlineCode",{parentName:"p"},"value")," and ",Object(o.b)("inlineCode",{parentName:"p"},"from"),"'s privateKey."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'const { Drip } = require(\'js-conflux-sdk\');\n\nasync function main() {\n  // Note: first you need initialize a Conflux object\n  // create account instance and add to wallet\n  const PRIVATE_KEY = "";\n  const ADDRESS = "";\n  const account = cfx.wallet.addPrivateKey(PRIVATE_KEY); \n  \n  // This will send a CFX transfer transaction to a RPC endpoint, it will return the tx hash\n  const txHash = await cfx.sendTransaction({\n    from: account.address, // sender address which added into conflux.wallet\n    to: ADDRESS, // receiver address\n    value: Drip.fromCFX(0.1), // 0.1 CFX = 100000000000000000 Drip\n  }); \n  console.log(txHash);\n\n  // You can get the tx info \n  const tx = await cfx.getTransactionByHash(txHash);\n  /*\n    {\n      "nonce": "0",\n      "value": "1000000000000000000000000000000000",\n      "gasPrice": "3",\n      "gas": "16777216",\n      "v": 1,\n      "transactionIndex": 0,\n      "status": 0,\n      "storageLimit": "65536",\n      "chainId": 1,\n      "epochHeight": 454,\n      "blockHash": "0x0909bdb39910d743e7e9b68f24afbbf187349447b161c4716bfd278fd7a0cbc7",\n      "contractCreated": null,\n      "data": "0x",\n      "from": "0x1be45681ac6c53d5a40475f7526bac1fe7590fb8",\n      "hash": "0xe6b56ef6a2be1987b0353a316cb02c78493673c31adb847b947d47c3936d89a8",\n      "r": "0x85f6729aa1e709202318bd6746c4a232a379eaa4cd9c2ea24c7babdbd09085cd",\n      "s": "0x7101e1e2ee4ddfcef8879358df0cb0792f34712116f100b76c8e9582625acd2f",\n      "to": "0x144aa8f554d2ffbc81e0aa0f533f76f5220db09c"\n   }\n  */\n\n  // the receipt will not generate immediately, so wait a while maybe 5s\n  const receipt = await cfx.getTransactionReceipt(txHash);\n  /*\n  {\n      "index": 0,\n      "epochNumber": 455,\n      "outcomeStatus": 0,\n      "gasUsed": "21000",\n      "gasFee": "37748736",\n      "blockHash": "0x0909bdb39910d743e7e9b68f24afbbf187349447b161c4716bfd278fd7a0cbc7",\n      "contractCreated": null,\n      "from": "0x1be45681ac6c53d5a40475f7526bac1fe7590fb8",\n      "logs": [],\n      "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",\n      "stateRoot": "0x19d109e6fe9f5a75cc54543af4beab08c0f23fdf95eea33b1afe5a9ef8b770dc",\n      "to": "0x144aa8f554d2ffbc81e0aa0f533f76f5220db09c",\n      "transactionHash": "0xe6b56ef6a2be1987b0353a316cb02c78493673c31adb847b947d47c3936d89a8"\n    }\n  */\n}\n\nmain();\n')),Object(o.b)("p",null,"If you can get the transaction receipt and it's ",Object(o.b)("inlineCode",{parentName:"p"},"outcomeStatus")," is ",Object(o.b)("inlineCode",{parentName:"p"},"0"),", congratulate you have send a transaction successfully."),Object(o.b)("h3",{id:"transactions-stage"},"Transaction's stage"),Object(o.b)("p",null,"After sending, a transaction could be in several different states, ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.conflux-chain.org/docs/conflux-doc/docs/send_transaction#track-my-transaction"}),"here")," is a detail explanation of transaction life cycle."),Object(o.b)("p",null,"You can get a transaction's state by it ",Object(o.b)("inlineCode",{parentName:"p"},"status")," or it's receipt's ",Object(o.b)("inlineCode",{parentName:"p"},"outcomeStatus"),"\n",Object(o.b)("inlineCode",{parentName:"p"},"tx.status")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"null")," The tx has not mined or executed"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"0")," Tx execute success"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"1")," Tx execute failed")),Object(o.b)("p",null,"Only after a transaction executed, you can get it's receipt. The ",Object(o.b)("inlineCode",{parentName:"p"},"receipt.outcomeStatus")," may have two value:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"0")," Tx execute success"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"1")," Tx execute failed")),Object(o.b)("p",null,"Correspond to transaction stages, the SDK has provide several advanced ",Object(o.b)("inlineCode",{parentName:"p"},"sendTransaction")," usage:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let txParameters = {\n  from: account,\n  to: "0x-a-address",\n  value: "0x100"\n};\nconst txHash = await cfx.sendTransaction(txParameters);  // send the tx and return a hash\nconst tx = await cfx.sendTransaction(txParameters).get();  // send the tx and return the tx\nconst tx = await cfx.sendTransaction(txParameters).mined();  // wait tx mined and return the tx\nconst receipt = await cfx.sendTransaction(txParameters).executed();  // wait tx executed and return receipt\nconst receipt = await cfx.sendTransaction(txParameters).confirmed();  // wait tx confirmed and return receipt\n')),Object(o.b)("p",null,"Note: the ",Object(o.b)("inlineCode",{parentName:"p"},"mined"),", ",Object(o.b)("inlineCode",{parentName:"p"},"executed"),", ",Object(o.b)("inlineCode",{parentName:"p"},"confirmed")," methods maybe will take a long time, and will be timeout, these methods are not recommended in production."),Object(o.b)("h3",{id:"a-complete-transaction"},"A complete transaction"),Object(o.b)("p",null,"Besides ",Object(o.b)("inlineCode",{parentName:"p"},"from"),", ",Object(o.b)("inlineCode",{parentName:"p"},"to"),", ",Object(o.b)("inlineCode",{parentName:"p"},"value")," there are several other fields could be filled with:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"nonce"),": optional, the nonce of a transaction to keep the order of your sending transactions, increase one by one. If missing, the result of cfx_getNextNonce will be automatically filled in and it works for general scenarios. Some cases, like sending a lot of transactions in a short period. It's recommended to maintain the nonce on your own."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"gasPrice"),": optional, the price in Drip that you would like to pay for each gas consumed. If missing, the result of cfx_gasPrice will be automatically filled in, which is the median of recent transactions."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"gas"),": optional, the max gas you would like to use in the transaction. After the end of transaction processing, the unused gas will be refunded if used_gas >= gas * 0.75. If missing, the result of cfx_estimateGasAndCollateral will be automatically filled in and it works for general scenarios."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"to"),": the receiver of the transaction, could be a personal account(start with 1) or contract(start with 8). Leave a null here to deploy a contract."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"value"),": the value (in Drip) to be transferred."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"storageLimit"),": optional, the max storage (in Byte) you would like to collateralize in the transaction. If missing, the result of cfx_estimateGasAndCollateral will be automatically filled in and it works for general senarios."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"epochHeight"),": optional, a transaction is can be verified only in epochs in the range ","[epochHeight - 10000, epochHeight + 10000]",", so it's a timeout mechanism. If missing, the result of cfx_epochNumber will be automatically filled in and it works for general scenarios."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"data"),": optional, it's either an attached message of a transaction or a function signature of a contract call. If missing, a null will be filled into it."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"chainId"),": optional, it used for dealing with a hard fork or preventing a transaction replay attack. If missing SDK will get it from RPC."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"from"),": The sender account(with private key) to sign the transaction.")),Object(o.b)("p",null,"Compare with ethereum Conflux transaction have three new field: ",Object(o.b)("inlineCode",{parentName:"p"},"storageLimit"),", ",Object(o.b)("inlineCode",{parentName:"p"},"epochHeight"),", ",Object(o.b)("inlineCode",{parentName:"p"},"chainId")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const txHash = await cfx.sendTransaction({\n    from: account.address, // sender address which added into conflux.wallet\n    to: ADDRESS, // receiver address\n    value: Drip.fromCFX(0.1), // 0.1 CFX = 100000000000000000 Drip\n    nonce: 100,\n    gas: 21000,\n    gasPrice: new Drip(1),\n    storageLimit: 0,\n    epochHeight: await cfx.getEpochNumber(),\n    data: null,\n    chainId: 1,\n}); \nconsole.log(txHash);\n")),Object(o.b)("h3",{id:"how-much-gas-and-storagelimit-a-transaction-need"},"How much ",Object(o.b)("inlineCode",{parentName:"h3"},"gas")," and ",Object(o.b)("inlineCode",{parentName:"h3"},"storageLimit")," a transaction need"),Object(o.b)("p",null,"If you are just transfer CFX, the gas should be ",Object(o.b)("inlineCode",{parentName:"p"},"21000"),", if you are interact with a contract it's a little complicated.\nNormally you can estimate it by call ",Object(o.b)("inlineCode",{parentName:"p"},"estimateGasAndCollateral"),"."),Object(o.b)("h5",{id:"gasprice"},Object(o.b)("inlineCode",{parentName:"h5"},"gasPrice")),Object(o.b)("p",null,"When sending transaction if you specify the ",Object(o.b)("inlineCode",{parentName:"p"},"gasPrice")," it will be used, if not it will try to use ",Object(o.b)("inlineCode",{parentName:"p"},"cfx.defaultGasPrice")," you can specify it when you initiallize the cfx object."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const cfx = new Conflux({\n    url: 'http://test.confluxrpc.org',\n    logger: console, // for debug\n    defaultGasPrice: 1\n});\n")),Object(o.b)("p",null,"If both ",Object(o.b)("inlineCode",{parentName:"p"},"gasPrice")," and ",Object(o.b)("inlineCode",{parentName:"p"},"defaultGasPrice")," is not specified, the SDK will fill the result of ",Object(o.b)("inlineCode",{parentName:"p"},"getGasPrice()")," to it."),Object(o.b)("p",null,"Currentlly set the gasPrice to ",Object(o.b)("inlineCode",{parentName:"p"},"1 Drip")," will enough to send most transactions."),Object(o.b)("h5",{id:"gas"},Object(o.b)("inlineCode",{parentName:"h5"},"gas")),Object(o.b)("p",null,"First you can specify the tx.",Object(o.b)("inlineCode",{parentName:"p"},"gas"),", if you don't it will use the result of ",Object(o.b)("inlineCode",{parentName:"p"},"estimateGasAndCollateral.gasUsed"),", and this value will be multiply a ratio ",Object(o.b)("inlineCode",{parentName:"p"},"defaultGasRatio")," (default 1.1), because the estimate result sometimes are not accurate, normally estimated ",Object(o.b)("inlineCode",{parentName:"p"},"gasUsed")," will not enough."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const cfx = new Conflux({\n    url: 'http://test.confluxrpc.org',\n    logger: console, // for debug\n    defaultGasRatio: 1.1\n});\n")),Object(o.b)("h5",{id:"storagelimit"},Object(o.b)("inlineCode",{parentName:"h5"},"storageLimit")),Object(o.b)("p",null,"Same as ",Object(o.b)("inlineCode",{parentName:"p"},"gas")," you can specify ",Object(o.b)("inlineCode",{parentName:"p"},"storageLimit")," when you send transaction (unit is Byte), if not"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const cfx = new Conflux({\n    url: 'http://test.confluxrpc.org',\n    logger: console, // for debug\n    defaultStorageRatio: 1.1\n});\n")),Object(o.b)("h3",{id:"sendrawtransaction"},"SendRawTransaction"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"sendTransaction")," will use get ",Object(o.b)("inlineCode",{parentName:"p"},"from"),"'s privateKey from wallet, use it sign transaction and invoke ",Object(o.b)("inlineCode",{parentName:"p"},"sendRawTransaction")," method, if you have a raw transaction you can use it directly. the ",Object(o.b)("inlineCode",{parentName:"p"},"sendRawTransaction")," method also can use ",Object(o.b)("inlineCode",{parentName:"p"},"get"),", ",Object(o.b)("inlineCode",{parentName:"p"},"mined"),", ",Object(o.b)("inlineCode",{parentName:"p"},"executed"),", ",Object(o.b)("inlineCode",{parentName:"p"},"confirmed")," method."),Object(o.b)("h3",{id:"why-my-transaction-is-always-pending-"},"Why my transaction is always pending ?"),Object(o.b)("p",null,"If your transaction alway pending in the pool, normally you have use a incorrect ",Object(o.b)("inlineCode",{parentName:"p"},"nonce")," or your ",Object(o.b)("inlineCode",{parentName:"p"},"balance")," is not enough. You can get the transaction info by it's hash, and check it's nonce with your account's nonce, and check your balance is enough to cover the value + gasPrice * gas + storageLimit."),Object(o.b)("h3",{id:"why-my-transaction-failed"},"Why my transaction failed?"),Object(o.b)("p",null,"If your transaction is failed, you can find reason in below ways:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Is your balance is enough cover your tx: check ",Object(o.b)("inlineCode",{parentName:"li"},"value"),", ",Object(o.b)("inlineCode",{parentName:"li"},"gas"),", ",Object(o.b)("inlineCode",{parentName:"li"},"storageLimit")),Object(o.b)("li",{parentName:"ol"},"Is your ",Object(o.b)("inlineCode",{parentName:"li"},"gas")," is enough, is your ",Object(o.b)("inlineCode",{parentName:"li"},"storageLimit")," enough"),Object(o.b)("li",{parentName:"ol"},"Check receipt's ",Object(o.b)("inlineCode",{parentName:"li"},"txExecErrorMsg")," for detail error message")),Object(o.b)("h3",{id:"how-to-send-a-transaction-with-a-note"},"How to send a transaction with a note"),Object(o.b)("p",null,"If you want send a transaction with a note, you can specify it through ",Object(o.b)("inlineCode",{parentName:"p"},"data"),", the tricky is you need convert your message to a hex string."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const hex = require('string-hex');\nlet hexString = '0x' + hex(\"This is the transaction note\");\n\nlet result = await cfx.sendTransaction({\n    from: address,\n    to: '0x1292d4955bb47F5153B88Ca12C7A9E4048f09839',\n    value: Drip.fromGDrip(0.001),\n    data: hexString\n});\n")),Object(o.b)("h3",{id:"how-to-build-a-raw-transaction"},"How to build a raw transaction"),Object(o.b)("p",null,"Build a ",Object(o.b)("inlineCode",{parentName:"p"},"Transaction"),", sign it with privateKey, then you can get a raw transaction."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import {Transaction} from 'js-conflux-sdk';\nlet tx = new Transaction({\n    from: '0x1be45681ac6c53d5a40475f7526bac1fe7590fb8',\n    nonce: 1,\n    to: '0x1be45681ac6c53d5a40475f7526bac1fe7590fb8',\n    value: 1,\n    gas: 21000,\n    gasPrice: 1,\n    storageLimit: 0,\n    epochHeight: 100,\n    chainId: 1,\n    data: \"0x\"\n});\nconst privateKey = \"....\";\ntx.sign(privateKey);\nlet rawTx = tx.serialize();\n")))}b.isMDXComponent=!0},207:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,m=d["".concat(r,".").concat(u)]||d[u]||p[u]||o;return n?i.a.createElement(m,c(c({ref:t},s),{},{components:n})):i.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<o;s++)r[s]=n[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);