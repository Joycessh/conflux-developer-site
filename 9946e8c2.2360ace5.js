(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{187:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(1),r=t(9),c=(t(0),t(217)),o={},i={id:"go-conflux-sdk/README",title:"README",description:"[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/LICENSE)",source:"@site/docs/go-conflux-sdk/README.md",permalink:"/docs/go-conflux-sdk/README",editUrl:"https://github.com/Conflux-Chain/conflux-developer-site/edit/master/docs/go-conflux-sdk/README.md",lastUpdatedBy:"ConfluxBot",lastUpdatedAt:1589182721},l=[{value:"Install",id:"install",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Manage Accounts",id:"manage-accounts",children:[]},{value:"Query Conflux Information",id:"query-conflux-information",children:[]},{value:"Send Transaction",id:"send-transaction",children:[]},{value:"Deploy/Call Smart Contract",id:"deploycall-smart-contract",children:[{value:"Contract Example",id:"contract-example",children:[]}]}],s={rightToc:l};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/LICENSE"}),Object(c.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/badge/License-GPL%20v3-blue.svg",alt:"License: GPL v3"}))),"\n",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://godoc.org/github.com/Conflux-Chain/go-conflux-sdk"}),Object(c.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/badge/Documentation-GoDoc-green.svg",alt:"Documentation"}))),"\n",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://travis-ci.org/Conflux-Chain/go-conflux-sdk"}),Object(c.b)("img",Object(a.a)({parentName:"a"},{src:"https://travis-ci.org/Conflux-Chain/go-conflux-sdk.svg?branch=master",alt:"Build Status"})))),Object(c.b)("h1",{id:"conflux-golang-api"},"Conflux Golang API"),Object(c.b)("p",null,"The Conflux Golang API allows any Golang client to interact with a local or remote Conflux node based on JSON-RPC 2.0 protocol. With Conflux Golang API, user can easily manage accounts, send transactions, deploy smart contracts and query blockchain information."),Object(c.b)("h2",{id:"install"},"Install"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"go get github.com/Conflux-Chain/go-conflux-sdk\n")),Object(c.b)("p",null,"You can also add the Conflux Golang API into vendor folder."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"govendor fetch github.com/Conflux-Chain/go-conflux-sdk\n")),Object(c.b)("h2",{id:"usage"},"Usage"),Object(c.b)("p",null,Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/api.md"}),"api document")),Object(c.b)("h2",{id:"manage-accounts"},"Manage Accounts"),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"AccountManager")," struct to manage accounts at local machine."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Create/Import/Update/Delete an account."),Object(c.b)("li",{parentName:"ul"},"List all accounts."),Object(c.b)("li",{parentName:"ul"},"Unlock/Lock an account."),Object(c.b)("li",{parentName:"ul"},"Sign a transaction.")),Object(c.b)("h2",{id:"query-conflux-information"},"Query Conflux Information"),Object(c.b)("p",null,"Use ",Object(c.b)("inlineCode",{parentName:"p"},"Client")," struct to query Conflux blockchain information, such as block, epoch, transaction, receipt. Following is an example to query the current epoch number:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n\n    conflux "github.com/Conflux-Chain/go-conflux-sdk"\n)\n\nfunc main() {\n    client, err := conflux.NewClient("http://52.175.52.111:12537")\n    if err != nil {\n        fmt.Println("failed to create client:", err)\n        return\n    }\n    defer client.Close()\n\n    epoch, err := client.GetEpochNumber()\n    if err != nil {\n        fmt.Println("failed to get epoch number:", err)\n        return\n    }\n\n    fmt.Println("Current epoch number:", epoch)\n}\n')),Object(c.b)("h2",{id:"send-transaction"},"Send Transaction"),Object(c.b)("p",null,"To send a transaction, you need to sign the transaction at local machine, and send the signed transaction to local or remote Conflux node."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Sign a transaction with unlocked account:"),Object(c.b)("p",{parentName:"li"},"  ",Object(c.b)("inlineCode",{parentName:"p"},"AccountManager.SignTransaction(tx UnsignedTransaction)"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Sign a transaction with passphrase for locked account:"),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",Object(a.a)({parentName:"pre"},{}),"    `AccountManager.SignTransactionWithPassphrase(tx UnsignedTransaction, passphrase string)`\n"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Send a unsigned transaction"),Object(c.b)("p",{parentName:"li"},"  ",Object(c.b)("inlineCode",{parentName:"p"},"Client.SendTransaction(tx *types.UnsignedTransaction)"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Send a encoded transaction"),Object(c.b)("p",{parentName:"li"},"  ",Object(c.b)("inlineCode",{parentName:"p"},"Client.SendRawTransaction(rawData []byte)"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Encode a encoded unsigned transaction with signature and send transaction"),Object(c.b)("p",{parentName:"li"},"  ",Object(c.b)("inlineCode",{parentName:"p"},"Client.SignEncodedTransactionAndSend(encodedTx []byte, v byte, r, s []byte)")))),Object(c.b)("p",null,"To send multiple transactions at a time, you can unlock the account at first, then send multiple transactions without passphrase. To send a single transaction, you can just only send the transaction with passphrase."),Object(c.b)("h2",{id:"deploycall-smart-contract"},"Deploy/Call Smart Contract"),Object(c.b)("p",null,"You can use ",Object(c.b)("inlineCode",{parentName:"p"},"Client.DeployContract")," to deploy a contract or use ",Object(c.b)("inlineCode",{parentName:"p"},"Client.GetContract")," to get a contract by deployed address. Then you can use the contract instance to operate contract, there are GetData/Call/SendTransaction. Please see ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/api.md"}),"api document")," for detail."),Object(c.b)("h3",{id:"contract-example"},"Contract Example"),Object(c.b)("p",null,"Please reference ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"(https://github.com/Conflux-Chain/go-conflux-sdk/blob/master/example/example_contract)"}),"contract example")," for all source code"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "encoding/hex"\n    "fmt"\n    "io/ioutil"\n    "math/big"\n    "time"\n\n    sdk "github.com/Conflux-Chain/go-conflux-sdk"\n    "github.com/Conflux-Chain/go-conflux-sdk/types"\n    "github.com/ethereum/go-ethereum/common"\n)\n\nfunc main() {\n\n    //unlock account\n    am := sdk.NewAccountManager("../keystore")\n    err := am.TimedUnlockDefault("hello", 300*time.Second)\n    if err != nil {\n        panic(err)\n    }\n\n    //init client\n    client, err := sdk.NewClient("http://testnet-jsonrpc.conflux-chain.org:12537")\n    if err != nil {\n        panic(err)\n    }\n    client.SetAccountManager(am)\n\n    //deploy contract\n    fmt.Println("start deploy contract...")\n    abiPath := "./contract/erc20.abi"\n    bytecodePath := "./contract/erc20.bytecode"\n    var contract *sdk.Contract\n\n    abi, err := ioutil.ReadFile(abiPath)\n    if err != nil {\n        panic(err)\n    }\n\n    bytecodeHexStr, err := ioutil.ReadFile(bytecodePath)\n    if err != nil {\n        panic(err)\n    }\n\n    bytecode, err := hex.DecodeString(string(bytecodeHexStr))\n    if err != nil {\n        panic(err)\n    }\n\n    result := client.DeployContract(nil, abi, bytecode, big.NewInt(100000), "biu", uint8(10), "BIU")\n    _ = <-result.DoneChannel\n    if result.Error != nil {\n        panic(result.Error)\n    }\n    contract = result.DeployedContract\n    fmt.Printf("deploy contract by client.DeployContract done\\ncontract address: %+v\\ntxhash:%v\\n\\n", contract.Address, result.TransactionHash)\n\n    time.Sleep(10 * time.Second)\n\n    // or get contract by deployed address\n    // deployedAt := types.Address("0x8d1089f00c40dcc290968b366889e85e67024662")\n    // contract, err := client.GetContract(string(abi), &deployedAt)\n    // if err != nil {\n    //  panic(err)\n    // }\n\n    //get data for send/call contract method\n    user := types.Address("0x19f4bcf113e0b896d9b34294fd3da86b4adf0302")\n    data, err := contract.GetData("balanceOf", user.ToCommonAddress())\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf("get data of method balanceOf result: 0x%x\\n\\n", data)\n\n    //call contract method\n    //Note: the output struct type need match method output type of ABI, go type "*big.Int" match abi type "uint256", go type "struct{Balance *big.Int}" match abi tuple type "(balance uint256)"\n    balance := &struct{ Balance *big.Int }{}\n    err = contract.Call(nil, balance, "balanceOf", user.ToCommonAddress())\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf("balance of address %v in contract is: %+v\\n\\n", user, balance)\n\n    //send transction for contract method\n    to := types.Address("0x160ebef20c1f739957bf9eecd040bce699cc42c6")\n    txhash, err := contract.SendTransaction(nil, "transfer", to.ToCommonAddress(), big.NewInt(10))\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Printf("transfer %v erc20 token to %v done, tx hash: %v\\n\\n", 10, to, txhash)\n\n    fmt.Println("wait for transaction be packed...")\n    for {\n        time.Sleep(time.Duration(1) * time.Second)\n        tx, err := client.GetTransactionByHash(*txhash)\n        if err != nil {\n            panic(err)\n        }\n        if tx.Status != nil {\n            fmt.Printf("transaction is packed.")\n            break\n        }\n    }\n    time.Sleep(10 * time.Second)\n\n    //get event log and decode it\n    receipt, err := client.GetTransactionReceipt(*txhash)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf("get receipt: %+v\\n\\n", receipt)\n\n    // decode Transfer Event\n    var Transfer struct {\n        From  common.Address\n        To    common.Address\n        Value *big.Int\n    }\n\n    err = contract.DecodeEvent(&Transfer, "Transfer", receipt.Logs[0])\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf("decoded transfer event: {From: 0x%x, To: 0x%x, Value: %v} ", Transfer.From, Transfer.To, Transfer.Value)\n}\n\n')))}u.isMDXComponent=!0},217:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),u=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i({},n,{},e)),t},b=function(e){var n=u(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=u(t),d=a,m=b["".concat(o,".").concat(d)]||b[d]||p[d]||c;return t?r.a.createElement(m,i({ref:n},s,{components:t})):r.a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var c=t.length,o=new Array(c);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<c;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);